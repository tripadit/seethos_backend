{
  "v": "5.7.11",
  "ip": 0,
  "op": 126,
  "fr": 25,
  "w": 512,
  "h": 512,
  "nm": "C",
  "assets": [],
  "layers": [
    {
      "ind": 1,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [282.616, 258.657, 0], "l": 2 },
        "a": { "a": 0, "k": [26.616, 2.657, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.0, 5.37],
                        [0.0, 0.0],
                        [-5.37, 0.0],
                        [0.0, 0.0],
                        [0.0, -5.37],
                        [0.0, 0.0],
                        [5.37, 0.0],
                        [0.0, 0.0]
                      ],
                      "o": [
                        [0.0, 0.0],
                        [0.0, -5.37],
                        [0.0, 0.0],
                        [5.37, 0.0],
                        [0.0, 0.0],
                        [0.0, 5.37],
                        [0.0, 0.0],
                        [-5.37, 0.0]
                      ],
                      "v": [
                        [174.493, -79.044],
                        [174.493, -79.044],
                        [184.217, -88.768],
                        [184.217, -88.768],
                        [193.942, -79.044],
                        [193.942, -79.044],
                        [184.217, -69.32],
                        [184.217, -69.32]
                      ],
                      "c": true
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "st",
                  "nm": "S",
                  "bm": 0,
                  "lc": 2,
                  "lj": 2,
                  "o": { "a": 0, "k": 100 },
                  "w": { "a": 0, "k": 1.295 },
                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0]
                      ],
                      "o": [
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0]
                      ],
                      "v": [
                        [186.003, -65.011],
                        [186.003, -78.04],
                        [199.033, -78.04],
                        [199.033, -65.011]
                      ],
                      "c": true
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "st",
                  "nm": "S",
                  "bm": 0,
                  "lc": 2,
                  "lj": 2,
                  "o": { "a": 0, "k": 100 },
                  "w": { "a": 0, "k": 1.295 },
                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.667], "y": [1.0] },
                    "o": { "x": [0.333], "y": [0.0] },
                    "t": 0,
                    "s": [0]
                  },
                  { "t": 125, "s": [360] }
                ]
              },
              "p": {
                "k": [
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 0,
                    "s": [225, 7],
                    "ti": [0, 0],
                    "to": [-1.667, -13.333]
                  },
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 62,
                    "s": [215, -73],
                    "ti": [-1.667, -13.333],
                    "to": [0, 0]
                  },
                  { "t": 125, "s": [225, 7] }
                ],
                "a": 1
              },
              "a": { "a": 0, "k": [188, -78] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": [
                      {
                        "i": { "x": 0.667, "y": 1.0 },
                        "o": { "x": 0.333, "y": 0.0 },
                        "t": 0,
                        "s": [
                          {
                            "i": [
                              [0.0, 0.0],
                              [0.0, 0.0],
                              [0.0, 0.0]
                            ],
                            "o": [
                              [0.0, 0.0],
                              [0.0, 0.0],
                              [0.0, 0.0]
                            ],
                            "v": [
                              [-44.947, 140.213],
                              [-36.108, 145.291],
                              [-44.947, 150.367]
                            ],
                            "c": true
                          }
                        ]
                      },
                      {
                        "i": { "x": 0.667, "y": 1.0 },
                        "o": { "x": 0.333, "y": 0.0 },
                        "t": 62,
                        "s": [
                          {
                            "i": [
                              [0.0, 0.0],
                              [0.0, 0.0],
                              [0.0, 0.0]
                            ],
                            "o": [
                              [0.0, 0.0],
                              [0.0, 0.0],
                              [0.0, 0.0]
                            ],
                            "v": [
                              [15.053, 140.213],
                              [23.892, 145.291],
                              [15.053, 150.367]
                            ],
                            "c": true
                          }
                        ]
                      },
                      {
                        "t": 125,
                        "s": [
                          {
                            "i": [
                              [0.0, 0.0],
                              [0.0, 0.0],
                              [0.0, 0.0]
                            ],
                            "o": [
                              [0.0, 0.0],
                              [0.0, 0.0],
                              [0.0, 0.0]
                            ],
                            "v": [
                              [-44.947, 140.213],
                              [-36.108, 145.291],
                              [-44.947, 150.367]
                            ],
                            "c": true
                          }
                        ]
                      }
                    ],
                    "a": 1
                  }
                },
                {
                  "ty": "st",
                  "nm": "S",
                  "bm": 0,
                  "lc": 2,
                  "lj": 2,
                  "o": { "a": 0, "k": 100 },
                  "w": { "a": 0, "k": 1.295 },
                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": [
                      {
                        "i": { "x": 0.667, "y": 1.0 },
                        "o": { "x": 0.333, "y": 0.0 },
                        "t": 0,
                        "s": [
                          {
                            "i": [
                              [0.0, 0.0],
                              [0.0, 0.0]
                            ],
                            "o": [
                              [0.0, 0.0],
                              [0.0, 0.0]
                            ],
                            "v": [
                              [-52.359, 145.29],
                              [-112.611, 145.287]
                            ],
                            "c": false
                          }
                        ]
                      },
                      {
                        "i": { "x": 0.667, "y": 1.0 },
                        "o": { "x": 0.333, "y": 0.0 },
                        "t": 62,
                        "s": [
                          {
                            "i": [
                              [0.0, 0.0],
                              [0.0, 0.0]
                            ],
                            "o": [
                              [0.0, 0.0],
                              [0.0, 0.0]
                            ],
                            "v": [
                              [7.641, 145.29],
                              [-112.611, 145.287]
                            ],
                            "c": false
                          }
                        ]
                      },
                      {
                        "t": 125,
                        "s": [
                          {
                            "i": [
                              [0.0, 0.0],
                              [0.0, 0.0]
                            ],
                            "o": [
                              [0.0, 0.0],
                              [0.0, 0.0]
                            ],
                            "v": [
                              [-52.359, 145.29],
                              [-112.611, 145.287]
                            ],
                            "c": false
                          }
                        ]
                      }
                    ],
                    "a": 1
                  }
                },
                {
                  "ty": "st",
                  "nm": "S",
                  "bm": 0,
                  "lc": 2,
                  "lj": 2,
                  "o": { "a": 0, "k": 100 },
                  "w": { "a": 0, "k": 1.295 },
                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [50, 126] },
              "a": { "a": 0, "k": [-70, 146] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "sh",
                      "nm": "P",
                      "ind": 0,
                      "ks": {
                        "k": {
                          "i": [
                            [0.0, -1.891],
                            [0.0, 0.0],
                            [1.89, 0.0],
                            [0.0, 0.0],
                            [0.0, 1.89],
                            [0.0, 0.0],
                            [-1.89, 0.0],
                            [0.0, 0.0]
                          ],
                          "o": [
                            [0.0, 0.0],
                            [0.0, 1.89],
                            [0.0, 0.0],
                            [-1.89, 0.0],
                            [0.0, 0.0],
                            [0.0, -1.891],
                            [0.0, 0.0],
                            [1.89, 0.0]
                          ],
                          "v": [
                            [-132.517, -141.635],
                            [-132.517, -135.187],
                            [-135.935, -131.769],
                            [-142.383, -131.769],
                            [-145.801, -135.187],
                            [-145.801, -141.635],
                            [-142.383, -145.053],
                            [-135.935, -145.053]
                          ],
                          "c": true
                        },
                        "a": 0
                      }
                    },
                    {
                      "ty": "st",
                      "nm": "S",
                      "bm": 0,
                      "lc": 2,
                      "lj": 2,
                      "o": { "a": 0, "k": 100 },
                      "w": { "a": 0, "k": 1.295 },
                      "c": { "a": 0, "k": [0, 0, 0, 1] }
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.667], "y": [1.0] },
                    "o": { "x": [0.333], "y": [0.0] },
                    "t": 0,
                    "s": [0]
                  },
                  { "t": 125, "s": [360] }
                ]
              },
              "p": {
                "k": [
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 0,
                    "s": [-120, -157],
                    "ti": [0, 0],
                    "to": [18.333, -5]
                  },
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 62,
                    "s": [-10, -187],
                    "ti": [18.333, -5],
                    "to": [0, 0]
                  },
                  { "t": 125, "s": [-120, -157] }
                ],
                "a": 1
              },
              "a": { "a": 0, "k": [-140, -137] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ty": 4
    },
    {
      "ind": 2,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [256, 256, 0], "l": 2 },
        "a": { "a": 0, "k": [0, 0, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-94.469, 154.207],
                    [-82.891, 154.207]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-198.661, 154.207],
                    [-155.404, 154.207]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-146.74, 154.207],
                    [-100.61, 154.207]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.191, -1.021],
                        [1.229, 0.0],
                        [-0.191, 1.021],
                        [-1.248, 0.0]
                      ],
                      "o": [
                        [-0.191, 1.021],
                        [-1.248, 0.0],
                        [0.191, -1.021],
                        [1.229, 0.0]
                      ],
                      "v": [
                        [-136.38, 8.137],
                        [-138.954, 9.971],
                        [-140.861, 8.137],
                        [-138.268, 6.303]
                      ],
                      "c": true
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "st",
                  "nm": "S",
                  "bm": 0,
                  "lc": 2,
                  "lj": 2,
                  "o": { "a": 0, "k": 100 },
                  "w": { "a": 0, "k": 1.205 },
                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                },
                {
                  "ty": "fl",
                  "nm": "F",
                  "bm": 0,
                  "c": { "a": 0, "k": [0, 0, 0, 1] },
                  "o": { "a": 0, "k": 100 },
                  "r": 1
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "sh",
                          "nm": "P",
                          "ind": 0,
                          "ks": {
                            "k": {
                              "i": [
                                [0.0, 0.0],
                                [-1.879, 0.759],
                                [-0.287, -1.104],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [7.63, -0.458],
                                [0.0, 0.0]
                              ],
                              "o": [
                                [0.0, 0.0],
                                [1.879, -0.759],
                                [0.287, 1.104],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [-7.63, 0.458],
                                [0.0, 0.0]
                              ],
                              "v": [
                                [-174.805, 17.463],
                                [-168.665, 16.125],
                                [-164.272, 15.653],
                                [-166.865, 18.013],
                                [-164.633, 20.686],
                                [-155.223, 20.686],
                                [-164.802, 25.257],
                                [-176.744, 24.486]
                              ],
                              "c": true
                            },
                            "a": 0
                          }
                        },
                        {
                          "ty": "st",
                          "nm": "S",
                          "bm": 0,
                          "lc": 2,
                          "lj": 2,
                          "o": { "a": 0, "k": 100 },
                          "w": { "a": 0, "k": 1.205 },
                          "c": { "a": 0, "k": [0, 0, 0, 1] }
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "sh",
                          "nm": "P",
                          "ind": 0,
                          "ks": {
                            "k": {
                              "i": [
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0]
                              ],
                              "o": [
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0]
                              ],
                              "v": [
                                [-169.128, 16.284],
                                [-171.08, 14.381],
                                [-161.394, 13.465],
                                [-164.622, 20.694]
                              ],
                              "c": false
                            },
                            "a": 0
                          }
                        },
                        {
                          "ty": "st",
                          "nm": "S",
                          "bm": 0,
                          "lc": 2,
                          "lj": 2,
                          "o": { "a": 0, "k": 100 },
                          "w": { "a": 0, "k": 1.205 },
                          "c": { "a": 0, "k": [0, 0, 0, 1] }
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "sh",
                          "nm": "P",
                          "ind": 0,
                          "ks": {
                            "k": {
                              "i": [
                                [0.169, -0.385],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [-0.795, 0.0],
                                [0.0, 0.0]
                              ],
                              "o": [
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.313, -0.747],
                                [0.0, 0.0],
                                [0.434, 0.0]
                              ],
                              "v": [
                                [-112.674, -3.618],
                                [-124.553, 20.549],
                                [-144.84, 20.621],
                                [-164.622, 20.694],
                                [-153.924, -3.232],
                                [-152.069, -4.413],
                                [-113.228, -4.413]
                              ],
                              "c": true
                            },
                            "a": 0
                          }
                        },
                        {
                          "ty": "st",
                          "nm": "S",
                          "bm": 0,
                          "lc": 2,
                          "lj": 2,
                          "o": { "a": 0, "k": 100 },
                          "w": { "a": 0, "k": 1.205 },
                          "c": { "a": 0, "k": [0, 0, 0, 1] }
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "sh",
                          "nm": "P",
                          "ind": 0,
                          "ks": {
                            "k": {
                              "i": [
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0]
                              ],
                              "o": [
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0]
                              ],
                              "v": [
                                [-180.833, 23.998],
                                [-176.936, 25.18],
                                [-174.589, 16.682],
                                [-185.714, 10.272],
                                [-180.673, -6.642]
                              ],
                              "c": false
                            },
                            "a": 0
                          }
                        },
                        {
                          "ty": "st",
                          "nm": "S",
                          "bm": 0,
                          "lc": 2,
                          "lj": 2,
                          "o": { "a": 0, "k": 100 },
                          "w": { "a": 0, "k": 1.205 },
                          "c": { "a": 0, "k": [0, 0, 0, 1] }
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "sh",
                          "nm": "P",
                          "ind": 0,
                          "ks": {
                            "k": [
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 14,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [-3.927, -7.06],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-132.287, -4.413],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 18,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [0.537, -6.923],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-140.037, -4.327],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 22,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [-3.927, -7.06],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-132.287, -4.413],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 25,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [0.537, -6.923],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-140.037, -4.327],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 29,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [-3.927, -7.06],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-132.287, -4.413],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 33,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [0.537, -6.923],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-140.037, -4.327],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 37,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [-3.927, -7.06],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-132.287, -4.413],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 41,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [0.537, -6.923],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-140.037, -4.327],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.833, "y": 1.0 },
                                "o": { "x": 0.167, "y": 0.0 },
                                "t": 45,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [-3.927, -7.06],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-132.287, -4.413],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 71,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [-3.927, -7.06],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-132.287, -4.413],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 75,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [0.537, -6.923],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-140.037, -4.327],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 79,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [-3.927, -7.06],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-132.287, -4.413],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 83,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [0.537, -6.923],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-140.037, -4.327],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 87,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [-3.927, -7.06],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-132.287, -4.413],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 90,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [0.537, -6.923],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-140.037, -4.327],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 94,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [-3.927, -7.06],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-132.287, -4.413],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "i": { "x": 0.667, "y": 1.0 },
                                "o": { "x": 0.333, "y": 0.0 },
                                "t": 98,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [0.537, -6.923],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-140.037, -4.327],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              },
                              {
                                "t": 102.599,
                                "s": [
                                  {
                                    "i": [
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [0.988, -0.265],
                                      [6.481, 2.048],
                                      [0.024, 0.337],
                                      [0.0, 0.0],
                                      [3.662, 3.301],
                                      [-2.289, 5.012],
                                      [-9.108, 0.578],
                                      [0.0, 0.0],
                                      [-0.12, 2.458],
                                      [0.0, 0.0],
                                      [-2.169, -1.711],
                                      [-3.927, -7.06],
                                      [0.0, 0.0],
                                      [0.313, -0.747],
                                      [0.0, 0.0]
                                    ],
                                    "o": [
                                      [0.0, 0.0],
                                      [0.024, 0.386],
                                      [-6.674, 1.952],
                                      [-0.892, -0.289],
                                      [0.0, 0.0],
                                      [0.0, 0.0],
                                      [-3.662, -3.277],
                                      [2.386, -5.229],
                                      [0.0, 0.0],
                                      [-0.121, 2.433],
                                      [0.0, 0.0],
                                      [4.915, 0.65],
                                      [2.964, 2.337],
                                      [0.0, 0.0],
                                      [-0.795, 0.0],
                                      [0.0, 0.0],
                                      [0.0, 0.0]
                                    ],
                                    "v": [
                                      [-144.84, 20.621],
                                      [-141.756, 41.054],
                                      [-143.274, 42.042],
                                      [-183.392, 41.825],
                                      [-184.814, 40.885],
                                      [-180.838, 23.995],
                                      [-199.271, 16.959],
                                      [-189.44, -20.966],
                                      [-169.273, -29.376],
                                      [-169.441, -25.665],
                                      [-157.322, -25.255],
                                      [-157.153, -29.014],
                                      [-145.949, -25.424],
                                      [-132.287, -4.413],
                                      [-152.069, -4.413],
                                      [-153.924, -3.232],
                                      [-164.622, 20.694]
                                    ],
                                    "c": true
                                  }
                                ]
                              }
                            ],
                            "a": 1
                          }
                        },
                        {
                          "ty": "st",
                          "nm": "S",
                          "bm": 0,
                          "lc": 2,
                          "lj": 2,
                          "o": { "a": 0, "k": 100 },
                          "w": { "a": 0, "k": 1.205 },
                          "c": { "a": 0, "k": [0, 0, 0, 1] }
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "sh",
                          "nm": "P",
                          "ind": 0,
                          "ks": {
                            "k": {
                              "i": [
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [-6.674, 1.952]
                              ],
                              "o": [
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [6.481, 2.048],
                                [0.0, 0.0]
                              ],
                              "v": [
                                [-134.07, 138.71],
                                [-136.238, 138.951],
                                [-145.901, 140.035],
                                [-148.19, 140.276],
                                [-162.96, 66.98],
                                [-172.815, 138.855],
                                [-175.947, 138.758],
                                [-185.271, 138.445],
                                [-186.934, 138.397],
                                [-183.392, 41.825],
                                [-143.274, 42.042]
                              ],
                              "c": true
                            },
                            "a": 0
                          }
                        },
                        {
                          "ty": "st",
                          "nm": "S",
                          "bm": 0,
                          "lc": 2,
                          "lj": 2,
                          "o": { "a": 0, "k": 100 },
                          "w": { "a": 0, "k": 1.205 },
                          "c": { "a": 0, "k": [0, 0, 0, 1] }
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "sh",
                      "nm": "P",
                      "ind": 0,
                      "ks": {
                        "k": {
                          "i": [
                            [1.952, -2.771],
                            [1.711, 1.542],
                            [-0.241, 2.843],
                            [0.0, 0.0],
                            [-2.265, -1.012]
                          ],
                          "o": [
                            [-1.976, 2.723],
                            [-1.422, -1.277],
                            [0.0, 0.0],
                            [0.217, 1.084],
                            [4.554, 2.072]
                          ],
                          "v": [
                            [-118.481, 151.938],
                            [-145.322, 153.191],
                            [-145.901, 140.035],
                            [-136.238, 138.951],
                            [-132.986, 142.397]
                          ],
                          "c": true
                        },
                        "a": 0
                      }
                    },
                    {
                      "ty": "st",
                      "nm": "S",
                      "bm": 0,
                      "lc": 2,
                      "lj": 2,
                      "o": { "a": 0, "k": 100 },
                      "w": { "a": 0, "k": 1.205 },
                      "c": { "a": 0, "k": [0, 0, 0, 1] }
                    },
                    {
                      "ty": "fl",
                      "nm": "F",
                      "bm": 0,
                      "c": { "a": 0, "k": [0, 0, 0, 1] },
                      "o": { "a": 0, "k": 100 },
                      "r": 1
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "sh",
                      "nm": "P",
                      "ind": 0,
                      "ks": {
                        "k": {
                          "i": [
                            [2.193, -2.482],
                            [1.469, 1.663],
                            [-0.386, 1.831],
                            [0.0, 0.0],
                            [-2.12, -1.229]
                          ],
                          "o": [
                            [-2.217, 2.434],
                            [-1.325, -1.47],
                            [0.0, 0.0],
                            [0.048, 1.084],
                            [4.168, 2.434]
                          ],
                          "v": [
                            [-160.285, 153.119],
                            [-186.332, 151.697],
                            [-185.271, 138.445],
                            [-175.947, 138.758],
                            [-173.2, 142.517]
                          ],
                          "c": true
                        },
                        "a": 0
                      }
                    },
                    {
                      "ty": "st",
                      "nm": "S",
                      "bm": 0,
                      "lc": 2,
                      "lj": 2,
                      "o": { "a": 0, "k": 100 },
                      "w": { "a": 0, "k": 1.205 },
                      "c": { "a": 0, "k": [0, 0, 0, 1] }
                    },
                    {
                      "ty": "fl",
                      "nm": "F",
                      "bm": 0,
                      "c": { "a": 0, "k": [0, 0, 0, 1] },
                      "o": { "a": 0, "k": 100 },
                      "r": 1
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ty": 4
    },
    {
      "ind": 3,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [91.237, 235.479, 0], "l": 2 },
        "a": { "a": 0, "k": [-164.763, -20.521, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [2.07, 1.632],
                    [4.915, 0.65],
                    [0.0, 0.0],
                    [-0.121, 2.433],
                    [0.0, 0.0],
                    [2.385, -5.229],
                    [1.578, -4.336]
                  ],
                  "o": [
                    [-3.518, -5.97],
                    [-2.169, -1.711],
                    [0.0, 0.0],
                    [-0.12, 2.458],
                    [0.0, 0.0],
                    [-9.108, 0.578],
                    [-0.662, 1.45],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-136.436, -11.666],
                    [-145.948, -25.424],
                    [-157.153, -29.014],
                    [-157.321, -25.255],
                    [-169.441, -25.665],
                    [-169.273, -29.376],
                    [-189.44, -20.966],
                    [-193.089, -11.666]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "fl",
              "nm": "F",
              "bm": 0,
              "c": { "a": 0, "k": [0, 0, 0, 1] },
              "o": { "a": 0, "k": 100 },
              "r": 1
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "td": 1,
      "ty": 4
    },
    {
      "ind": 4,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.667], "y": [1.0] },
              "o": { "x": [0.333], "y": [0.0] },
              "t": 9,
              "s": [0]
            },
            {
              "i": { "x": [0.667], "y": [1.0] },
              "o": { "x": [0.333], "y": [0.0] },
              "t": 14,
              "s": [15]
            },
            {
              "i": { "x": [0.667], "y": [1.0] },
              "o": { "x": [0.333], "y": [0.0] },
              "t": 45,
              "s": [15]
            },
            {
              "i": { "x": [0.833], "y": [1.0] },
              "o": { "x": [0.167], "y": [0.0] },
              "t": 50,
              "s": [0]
            },
            {
              "i": { "x": [0.667], "y": [1.0] },
              "o": { "x": [0.333], "y": [0.0] },
              "t": 71,
              "s": [0]
            },
            {
              "i": { "x": [0.667], "y": [1.0] },
              "o": { "x": [0.333], "y": [0.0] },
              "t": 76,
              "s": [15]
            },
            {
              "i": { "x": [0.667], "y": [1.0] },
              "o": { "x": [0.333], "y": [0.0] },
              "t": 107,
              "s": [15]
            },
            { "t": 113, "s": [0] }
          ]
        },
        "p": { "a": 0, "k": [89.186, 229.029, 0], "l": 2 },
        "a": { "a": 0, "k": [-166.814, -26.971, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [14.096, 2.433],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [-0.121, 2.433],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [1.614, 2.988],
                    [0.0, 0.0],
                    [-2.169, 0.578],
                    [-0.217, -0.41],
                    [-2.843, 2.434],
                    [-2.627, -0.458],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [-0.12, 2.458],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [2.337, -0.578],
                    [-0.169, -0.578],
                    [2.964, -2.506],
                    [2.626, 0.482],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-157.056, -31.399],
                    [-157.153, -29.014],
                    [-157.322, -25.255],
                    [-169.441, -25.665],
                    [-169.273, -29.376],
                    [-169.128, -32.99],
                    [-171.634, -39.399],
                    [-170.26, -41.76],
                    [-171.369, -48.362],
                    [-167.224, -45.712],
                    [-166.887, -56.265],
                    [-157.996, -55.229],
                    [-151.9, -55.109]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [2.626, 0.482],
                    [2.964, -2.506],
                    [-0.169, -0.578],
                    [2.337, -0.578],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [-2.048, 8.072],
                    [-4.843, 0.602],
                    [-2.843, -4.771]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [-2.627, -0.458],
                    [-2.843, 2.434],
                    [-0.217, -0.41],
                    [-2.169, 0.578],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [2.048, -8.072],
                    [4.819, -0.578],
                    [2.867, 4.747]
                  ],
                  "v": [
                    [-151.9, -55.109],
                    [-157.996, -55.229],
                    [-166.887, -56.265],
                    [-167.224, -45.712],
                    [-171.369, -48.362],
                    [-170.26, -41.76],
                    [-171.634, -39.399],
                    [-176.814, -56.747],
                    [-163.345, -66.554],
                    [-148.72, -64.072]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "fl",
              "nm": "F",
              "bm": 0,
              "c": { "a": 0, "k": [0, 0, 0, 1] },
              "o": { "a": 0, "k": 100 },
              "r": 1
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "tt": 2,
      "ty": 4
    },
    {
      "ind": 5,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [159.351, 320.388, 0], "l": 2 },
        "a": { "a": 0, "k": [-96.649, 64.388, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, -2.0],
                    [0.0, 0.0],
                    [-2.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [2.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 2.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-120.632, 12.585],
                    [-117.286, 12.585],
                    [-113.665, 16.206],
                    [-113.665, 112.57],
                    [-110.044, 116.191],
                    [-72.665, 116.191]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "tm",
          "nm": "T",
          "s": {
            "a": 1,
            "k": [
              {
                "i": { "x": [0.667], "y": [1.0] },
                "o": { "x": [0.333], "y": [0.0] },
                "t": 0,
                "s": [100]
              },
              { "t": 9, "s": [0] }
            ]
          },
          "e": { "a": 0, "k": 100 },
          "o": { "a": 0, "k": 0 },
          "m": 1
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ty": 4
    },
    {
      "ind": 6,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [191.706, 371.645, 0], "l": 2 },
        "a": { "a": 0, "k": [-64.294, 115.645, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.0, -0.693],
                        [-0.693, 0.0],
                        [0.0, 0.693],
                        [0.693, 0.0]
                      ],
                      "o": [
                        [0.0, 0.693],
                        [0.693, 0.0],
                        [0.0, -0.693],
                        [-0.693, 0.0]
                      ],
                      "v": [
                        [-57.234, 118.39],
                        [-55.978, 119.646],
                        [-54.722, 118.39],
                        [-55.978, 117.135]
                      ],
                      "c": true
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "fl",
                  "nm": "F",
                  "bm": 0,
                  "c": { "a": 0, "k": [0, 0, 0, 1] },
                  "o": { "a": 0, "k": 100 },
                  "r": 1
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.0, -0.693],
                        [-0.693, 0.0],
                        [0.0, 0.693],
                        [0.693, 0.0]
                      ],
                      "o": [
                        [0.0, 0.693],
                        [0.693, 0.0],
                        [0.0, -0.693],
                        [-0.693, 0.0]
                      ],
                      "v": [
                        [-57.234, 112.899],
                        [-55.978, 114.155],
                        [-54.722, 112.899],
                        [-55.978, 111.644]
                      ],
                      "c": true
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "fl",
                  "nm": "F",
                  "bm": 0,
                  "c": { "a": 0, "k": [0, 0, 0, 1] },
                  "o": { "a": 0, "k": 100 },
                  "r": 1
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "sh",
                      "nm": "P",
                      "ind": 0,
                      "ks": {
                        "k": {
                          "i": [
                            [0.0, -0.969],
                            [0.0, 0.0],
                            [-0.969, 0.0],
                            [0.0, 0.0],
                            [0.0, 0.969],
                            [0.0, 0.0],
                            [0.969, 0.0],
                            [0.0, 0.0]
                          ],
                          "o": [
                            [0.0, 0.0],
                            [0.0, 0.969],
                            [0.0, 0.0],
                            [0.969, 0.0],
                            [0.0, 0.0],
                            [0.0, -0.969],
                            [0.0, 0.0],
                            [-0.969, 0.0]
                          ],
                          "v": [
                            [-77.472, 109.449],
                            [-77.472, 121.84],
                            [-75.717, 123.596],
                            [-69.502, 123.596],
                            [-67.747, 121.84],
                            [-67.747, 109.449],
                            [-69.502, 107.694],
                            [-75.717, 107.694]
                          ],
                          "c": true
                        },
                        "a": 0
                      }
                    },
                    {
                      "ty": "st",
                      "nm": "S",
                      "bm": 0,
                      "lc": 2,
                      "lj": 2,
                      "o": { "a": 0, "k": 100 },
                      "w": { "a": 0, "k": 1.205 },
                      "c": { "a": 0, "k": [0, 0, 0, 1] }
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "sh",
                      "nm": "P",
                      "ind": 0,
                      "ks": {
                        "k": {
                          "i": [
                            [0.0, -0.969],
                            [0.0, 0.0],
                            [-0.969, 0.0],
                            [0.0, 0.0],
                            [0.0, 0.969],
                            [0.0, 0.0],
                            [0.969, 0.0],
                            [0.0, 0.0]
                          ],
                          "o": [
                            [0.0, 0.0],
                            [0.0, 0.969],
                            [0.0, 0.0],
                            [0.969, 0.0],
                            [0.0, 0.0],
                            [0.0, -0.969],
                            [0.0, 0.0],
                            [-0.969, 0.0]
                          ],
                          "v": [
                            [-60.84, 109.449],
                            [-60.84, 121.84],
                            [-59.085, 123.596],
                            [-52.87, 123.596],
                            [-51.115, 121.84],
                            [-51.115, 109.449],
                            [-52.87, 107.694],
                            [-59.085, 107.694]
                          ],
                          "c": true
                        },
                        "a": 0
                      }
                    },
                    {
                      "ty": "st",
                      "nm": "S",
                      "bm": 0,
                      "lc": 2,
                      "lj": 2,
                      "o": { "a": 0, "k": 100 },
                      "w": { "a": 0, "k": 1.205 },
                      "c": { "a": 0, "k": [0, 0, 0, 1] }
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "sh",
                      "nm": "P",
                      "ind": 0,
                      "ks": {
                        "k": {
                          "i": [
                            [0.0, -0.969],
                            [0.0, 0.0],
                            [-0.969, 0.0],
                            [0.0, 0.0],
                            [0.0, 0.969],
                            [0.0, 0.0],
                            [0.969, 0.0],
                            [0.0, 0.0]
                          ],
                          "o": [
                            [0.0, 0.0],
                            [0.0, 0.969],
                            [0.0, 0.0],
                            [0.969, 0.0],
                            [0.0, 0.0],
                            [0.0, -0.969],
                            [0.0, 0.0],
                            [-0.969, 0.0]
                          ],
                          "v": [
                            [-83.476, 104.311],
                            [-83.476, 126.979],
                            [-81.721, 128.734],
                            [-46.867, 128.734],
                            [-45.111, 126.979],
                            [-45.111, 104.311],
                            [-46.867, 102.556],
                            [-81.721, 102.556]
                          ],
                          "c": true
                        },
                        "a": 0
                      }
                    },
                    {
                      "ty": "st",
                      "nm": "S",
                      "bm": 0,
                      "lc": 2,
                      "lj": 2,
                      "o": { "a": 0, "k": 100 },
                      "w": { "a": 0, "k": 1.205 },
                      "c": { "a": 0, "k": [0, 0, 0, 1] }
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ty": 4
    },
    {
      "ind": 7,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [92.836, 115.613, 0], "l": 2 },
        "a": { "a": 0, "k": [-163.164, -140.387, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.184, -0.425],
                        [0.313, -0.318],
                        [0.426, -0.181],
                        [0.478, 0.0],
                        [0.424, 0.182],
                        [0.315, 0.318],
                        [0.184, 0.424],
                        [0.0, 0.485],
                        [-0.181, 0.425],
                        [-0.318, 0.314],
                        [-0.424, 0.184],
                        [-0.485, 0.0],
                        [-0.297, -0.082],
                        [-0.256, -0.152],
                        [-0.212, -0.211],
                        [-0.153, -0.258],
                        [-0.085, -0.295],
                        [0.0, -0.32]
                      ],
                      "o": [
                        [-0.184, 0.424],
                        [-0.315, 0.318],
                        [-0.424, 0.182],
                        [-0.485, 0.0],
                        [-0.424, -0.181],
                        [-0.318, -0.318],
                        [-0.181, -0.425],
                        [0.0, -0.478],
                        [0.184, -0.424],
                        [0.315, -0.314],
                        [0.424, -0.184],
                        [0.32, 0.0],
                        [0.296, 0.082],
                        [0.259, 0.152],
                        [0.209, 0.211],
                        [0.151, 0.259],
                        [0.082, 0.295],
                        [0.0, 0.485]
                      ],
                      "v": [
                        [-145.257, -139.025],
                        [-146.001, -137.914],
                        [-147.109, -137.165],
                        [-148.46, -136.892],
                        [-149.825, -137.165],
                        [-150.935, -137.914],
                        [-151.686, -139.025],
                        [-151.956, -140.389],
                        [-151.686, -141.742],
                        [-150.935, -142.848],
                        [-149.825, -143.594],
                        [-148.46, -143.869],
                        [-147.537, -143.744],
                        [-146.707, -143.393],
                        [-146.001, -142.848],
                        [-145.457, -142.144],
                        [-145.104, -141.312],
                        [-144.982, -140.389]
                      ],
                      "c": true
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 1,
                  "ks": {
                    "k": {
                      "i": [
                        [0.108, 0.386],
                        [0.195, 0.338],
                        [0.275, 0.274],
                        [0.332, 0.198],
                        [0.384, 0.107],
                        [0.414, 0.0],
                        [0.386, -0.108],
                        [0.336, -0.195],
                        [0.273, -0.276],
                        [0.198, -0.335],
                        [0.106, -0.385],
                        [0.0, -0.414],
                        [-0.108, -0.385],
                        [-0.195, -0.333],
                        [-0.273, -0.274],
                        [-0.336, -0.198],
                        [-0.381, -0.107],
                        [-0.419, 0.0],
                        [-0.388, 0.106],
                        [-0.336, 0.195],
                        [-0.273, 0.274],
                        [-0.198, 0.334],
                        [-0.108, 0.385],
                        [0.0, 0.414]
                      ],
                      "o": [
                        [-0.108, -0.387],
                        [-0.195, -0.338],
                        [-0.275, -0.274],
                        [-0.334, -0.196],
                        [-0.384, -0.106],
                        [-0.419, 0.0],
                        [-0.384, 0.108],
                        [-0.334, 0.195],
                        [-0.275, 0.276],
                        [-0.198, 0.335],
                        [-0.108, 0.385],
                        [0.0, 0.418],
                        [0.106, 0.385],
                        [0.195, 0.334],
                        [0.275, 0.274],
                        [0.334, 0.196],
                        [0.384, 0.106],
                        [0.416, 0.0],
                        [0.386, -0.107],
                        [0.334, -0.195],
                        [0.275, -0.274],
                        [0.198, -0.333],
                        [0.106, -0.385],
                        [0.0, -0.419]
                      ],
                      "v": [
                        [-144.109, -141.578],
                        [-144.563, -142.664],
                        [-145.271, -143.582],
                        [-146.184, -144.289],
                        [-147.262, -144.744],
                        [-148.46, -144.904],
                        [-149.664, -144.741],
                        [-150.745, -144.286],
                        [-151.658, -143.578],
                        [-152.366, -142.662],
                        [-152.82, -141.582],
                        [-152.98, -140.383],
                        [-152.82, -139.18],
                        [-152.368, -138.103],
                        [-151.665, -137.191],
                        [-150.749, -136.484],
                        [-149.674, -136.029],
                        [-148.471, -135.869],
                        [-147.264, -136.029],
                        [-146.182, -136.482],
                        [-145.269, -137.185],
                        [-144.561, -138.097],
                        [-144.104, -139.174],
                        [-143.947, -140.371]
                      ],
                      "c": true
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "fl",
                  "nm": "F",
                  "bm": 0,
                  "c": { "a": 0, "k": [0, 0, 0, 1] },
                  "o": { "a": 0, "k": 100 },
                  "r": 1
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.833], "y": [0.833] },
                    "o": { "x": [0.167], "y": [0.167] },
                    "t": 52,
                    "s": [0]
                  },
                  { "t": 57, "s": [100] }
                ]
              },
              "r": { "a": 0, "k": 0 },
              "p": {
                "k": [
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 92,
                    "s": [0, 0],
                    "ti": [0, 0],
                    "to": [0, -0.833]
                  },
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 95,
                    "s": [0, -5],
                    "ti": [0, -0.833],
                    "to": [0, 0]
                  },
                  { "t": 99, "s": [0, 0] }
                ],
                "x": "var $bm_rt;\nvar fx = effect('\u015dlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;",
                "a": 1
              },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [-0.052, -0.047],
                    [0.0, -0.086],
                    [0.0, 0.0],
                    [0.047, -0.052],
                    [0.08, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.173],
                    [0.0, 0.0],
                    [-0.049, 0.052],
                    [-0.087, 0.0],
                    [0.0, 0.0],
                    [-0.049, -0.046],
                    [0.0, -0.082],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.071, 0.0],
                    [0.052, 0.048],
                    [0.0, 0.0],
                    [0.0, 0.071],
                    [-0.047, 0.051],
                    [0.0, 0.0],
                    [-0.174, 0.0],
                    [0.0, 0.0],
                    [0.0, -0.071],
                    [0.047, -0.051],
                    [0.0, 0.0],
                    [0.075, 0.0],
                    [0.049, 0.045],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-153.545, -137.011],
                    [-153.361, -136.941],
                    [-153.283, -136.739],
                    [-153.283, -136.259],
                    [-153.354, -136.076],
                    [-153.545, -135.999],
                    [-158.573, -135.999],
                    [-158.834, -136.259],
                    [-158.834, -144.526],
                    [-158.761, -144.709],
                    [-158.561, -144.786],
                    [-158.069, -144.786],
                    [-157.884, -144.717],
                    [-157.811, -144.526],
                    [-157.811, -137.011]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "fl",
              "nm": "F",
              "bm": 0,
              "c": { "a": 0, "k": [0, 0, 0, 1] },
              "o": { "a": 0, "k": 100 },
              "r": 1
            },
            {
              "ty": "tr",
              "o": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.833], "y": [0.833] },
                    "o": { "x": [0.167], "y": [0.167] },
                    "t": 47,
                    "s": [0]
                  },
                  { "t": 52, "s": [100] }
                ]
              },
              "r": { "a": 0, "k": 0 },
              "p": {
                "k": [
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 88,
                    "s": [0, 0],
                    "ti": [0, 0],
                    "to": [0, -0.833]
                  },
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 91,
                    "s": [0, -5],
                    "ti": [0, -0.833],
                    "to": [0, 0]
                  },
                  { "t": 95, "s": [0, 0] }
                ],
                "x": "var $bm_rt;\nvar fx = effect('\u015dlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;",
                "a": 1
              },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [-0.052, -0.047],
                    [0.0, -0.086],
                    [0.0, 0.0],
                    [0.047, -0.052],
                    [0.08, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.173],
                    [0.0, 0.0],
                    [-0.049, 0.052],
                    [-0.087, 0.0],
                    [0.0, 0.0],
                    [-0.049, -0.046],
                    [0.0, -0.082],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.071, 0.0],
                    [0.052, 0.048],
                    [0.0, 0.0],
                    [0.0, 0.071],
                    [-0.047, 0.051],
                    [0.0, 0.0],
                    [-0.174, 0.0],
                    [0.0, 0.0],
                    [0.0, -0.071],
                    [0.047, -0.051],
                    [0.0, 0.0],
                    [0.075, 0.0],
                    [0.049, 0.045],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-160.335, -137.011],
                    [-160.152, -136.941],
                    [-160.074, -136.739],
                    [-160.074, -136.259],
                    [-160.145, -136.076],
                    [-160.335, -135.999],
                    [-165.364, -135.999],
                    [-165.625, -136.259],
                    [-165.625, -144.526],
                    [-165.552, -144.709],
                    [-165.352, -144.786],
                    [-164.86, -144.786],
                    [-164.674, -144.717],
                    [-164.601, -144.526],
                    [-164.601, -137.011]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "fl",
              "nm": "F",
              "bm": 0,
              "c": { "a": 0, "k": [0, 0, 0, 1] },
              "o": { "a": 0, "k": 100 },
              "r": 1
            },
            {
              "ty": "tr",
              "o": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.833], "y": [0.833] },
                    "o": { "x": [0.167], "y": [0.167] },
                    "t": 42,
                    "s": [0]
                  },
                  { "t": 47, "s": [100] }
                ]
              },
              "r": { "a": 0, "k": 0 },
              "p": {
                "k": [
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 84,
                    "s": [0, 0],
                    "ti": [0, 0],
                    "to": [0, -0.833]
                  },
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 87,
                    "s": [0, -5],
                    "ti": [0, -0.833],
                    "to": [0, 0]
                  },
                  { "t": 91, "s": [0, 0] }
                ],
                "x": "var $bm_rt;\nvar fx = effect('\u015dlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;",
                "a": 1
              },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, -0.185],
                    [0.0, 0.0],
                    [0.047, -0.055],
                    [0.089, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [-0.049, -0.044],
                    [0.0, -0.094],
                    [0.0, 0.0],
                    [0.045, -0.054],
                    [0.087, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, -0.185],
                    [0.0, 0.0],
                    [0.174, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.166],
                    [0.0, 0.0],
                    [-0.174, 0.0]
                  ],
                  "o": [
                    [0.176, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.071],
                    [-0.047, 0.055],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.073, 0.0],
                    [0.052, 0.044],
                    [0.0, 0.0],
                    [0.0, 0.071],
                    [-0.042, 0.055],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.176, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.173],
                    [0.0, 0.0],
                    [-0.174, 0.0],
                    [0.0, 0.0],
                    [0.0, -0.181],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-167.274, -144.786],
                    [-167.009, -144.508],
                    [-167.009, -144.028],
                    [-167.079, -143.838],
                    [-167.286, -143.756],
                    [-172.204, -143.756],
                    [-172.204, -141.141],
                    [-168.293, -141.141],
                    [-168.11, -141.076],
                    [-168.032, -140.869],
                    [-168.032, -140.383],
                    [-168.098, -140.195],
                    [-168.293, -140.111],
                    [-172.204, -140.111],
                    [-172.204, -137.029],
                    [-167.232, -137.029],
                    [-166.966, -136.751],
                    [-166.966, -136.259],
                    [-167.227, -135.999],
                    [-172.966, -135.999],
                    [-173.228, -136.248],
                    [-173.228, -144.514],
                    [-172.966, -144.786]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "fl",
              "nm": "F",
              "bm": 0,
              "c": { "a": 0, "k": [0, 0, 0, 1] },
              "o": { "a": 0, "k": 100 },
              "r": 1
            },
            {
              "ty": "tr",
              "o": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.833], "y": [0.833] },
                    "o": { "x": [0.167], "y": [0.167] },
                    "t": 37,
                    "s": [0]
                  },
                  { "t": 42, "s": [100] }
                ]
              },
              "r": { "a": 0, "k": 0 },
              "p": {
                "k": [
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 80,
                    "s": [0, 0],
                    "ti": [0, 0],
                    "to": [0, -0.833]
                  },
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 83,
                    "s": [0, -5],
                    "ti": [0, -0.833],
                    "to": [0, 0]
                  },
                  { "t": 87, "s": [0, 0] }
                ],
                "x": "var $bm_rt;\nvar fx = effect('\u015dlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;",
                "a": 1
              },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [-0.047, 0.052],
                    [-0.078, 0.0],
                    [0.0, 0.0],
                    [-0.056, -0.047],
                    [0.0, -0.079],
                    [0.0, 0.0],
                    [0.186, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.173],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.188, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.173],
                    [0.0, 0.0],
                    [-0.045, 0.052],
                    [-0.082, 0.0],
                    [0.0, 0.0],
                    [-0.054, -0.051],
                    [0.0, -0.071],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, -0.071],
                    [0.047, -0.051],
                    [0.0, 0.0],
                    [0.073, 0.0],
                    [0.056, 0.048],
                    [0.0, 0.0],
                    [0.0, 0.173],
                    [0.0, 0.0],
                    [-0.174, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.173],
                    [0.0, 0.0],
                    [-0.174, 0.0],
                    [0.0, 0.0],
                    [0.0, -0.071],
                    [0.047, -0.051],
                    [0.0, 0.0],
                    [0.071, 0.0],
                    [0.056, 0.052],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-176.131, -144.526],
                    [-176.061, -144.709],
                    [-175.872, -144.786],
                    [-175.388, -144.786],
                    [-175.195, -144.715],
                    [-175.108, -144.526],
                    [-175.108, -136.259],
                    [-175.388, -135.999],
                    [-175.872, -135.999],
                    [-176.131, -136.259],
                    [-176.131, -140.111],
                    [-181.357, -140.111],
                    [-181.357, -136.259],
                    [-181.64, -135.999],
                    [-182.12, -135.999],
                    [-182.381, -136.259],
                    [-182.381, -144.526],
                    [-182.313, -144.709],
                    [-182.12, -144.786],
                    [-181.628, -144.786],
                    [-181.44, -144.709],
                    [-181.357, -144.526],
                    [-181.357, -141.117],
                    [-176.131, -141.117]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "fl",
              "nm": "F",
              "bm": 0,
              "c": { "a": 0, "k": [0, 0, 0, 1] },
              "o": { "a": 0, "k": 100 },
              "r": 1
            },
            {
              "ty": "tr",
              "o": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.833], "y": [0.833] },
                    "o": { "x": [0.167], "y": [0.167] },
                    "t": 32,
                    "s": [0]
                  },
                  { "t": 37, "s": [100] }
                ]
              },
              "r": { "a": 0, "k": 0 },
              "p": {
                "k": [
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 76,
                    "s": [0, 0],
                    "ti": [0, 0],
                    "to": [0, -0.833]
                  },
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 79,
                    "s": [0, -5],
                    "ti": [0, -0.833],
                    "to": [0, 0]
                  },
                  { "t": 83, "s": [0, 0] }
                ],
                "x": "var $bm_rt;\nvar fx = effect('\u015dlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;",
                "a": 1
              },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ef": [
        {
          "ty": 5,
          "ix": 1,
          "nm": "\u015d",
          "ef": [
            { "ix": 1, "nm": "A", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 2, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 3, "nm": "F", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 4, "nm": "A", "ty": 6, "v": 0 },
            { "ix": 5, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 6, "nm": "A", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 7, "nm": "", "ty": 6, "v": 0 },
            { "ix": 8, "nm": "I", "ty": 6, "v": 0 },
            { "ix": 9, "nm": "S", "ty": 0, "v": { "a": 0, "k": 60 } },
            { "ix": 10, "nm": "S", "ty": 0, "v": { "a": 0, "k": 25 } },
            { "ix": 11, "nm": "", "ty": 6, "v": 0 },
            { "ix": 12, "nm": "F", "ty": 6, "v": 0 },
            { "ix": 13, "nm": "E", "ty": 0, "v": { "a": 0, "k": 10 } },
            { "ix": 14, "nm": "E", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 15, "nm": "D", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 16, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 17, "nm": "B", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 18, "nm": "", "ty": 6, "v": 0 },
            { "ix": 19, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 20, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 21, "nm": "M", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 22, "nm": "O", "ty": 6, "v": 0 },
            { "ix": 23, "nm": "O", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 24, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0.05 } },
            { "ix": 25, "nm": "O", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 26, "nm": "", "ty": 6, "v": 0 },
            { "ix": 27, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 28, "nm": "S", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 29, "nm": "S", "ty": 0, "v": { "a": 0, "k": 100 } },
            { "ix": 30, "nm": "", "ty": 6, "v": 0 },
            { "ix": 31, "nm": "", "ty": 6, "v": 0 },
            { "ix": 32, "nm": "P", "ty": 0, "v": { "a": 0, "k": 1 } }
          ],
          "en": 1
        }
      ],
      "ty": 4
    },
    {
      "ind": 8,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [119.628, 138.208, 0], "l": 2 },
        "a": { "a": 0, "k": [-136.372, -117.792, 0], "l": 2 },
        "s": {
          "k": [
            {
              "i": { "x": [0.667, 0.667, 0.667], "y": [1.0, 1.0, 1.0] },
              "o": { "x": [0.333, 0.333, 0.333], "y": [0.0, 0.0, 0.0] },
              "t": 24,
              "s": [0, 0, 100]
            },
            { "t": 32, "s": [100, 100, 100] }
          ],
          "x": "var $bm_rt;\nvar fx = effect('\u015dlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;",
          "a": 1,
          "l": 2
        }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, -1.292],
                    [0.0, 0.0],
                    [1.292, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 1.292],
                    [0.0, 0.0],
                    [-1.292, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 1.292],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [-1.292, 0.0],
                    [0.0, 0.0],
                    [0.0, -1.292],
                    [0.0, 0.0],
                    [1.292, 0.0]
                  ],
                  "v": [
                    [-136.372, -151.867],
                    [-136.372, -127.872],
                    [-138.712, -125.532],
                    [-142.795, -125.532],
                    [-142.795, -117.792],
                    [-154.466, -125.532],
                    [-188.04, -125.532],
                    [-190.38, -127.872],
                    [-190.38, -151.867],
                    [-188.04, -154.207],
                    [-138.712, -154.207]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ef": [
        {
          "ty": 5,
          "ix": 1,
          "nm": "\u015d",
          "ef": [
            { "ix": 1, "nm": "A", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 2, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 3, "nm": "F", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 4, "nm": "A", "ty": 6, "v": 0 },
            { "ix": 5, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 6, "nm": "A", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 7, "nm": "", "ty": 6, "v": 0 },
            { "ix": 8, "nm": "I", "ty": 6, "v": 0 },
            { "ix": 9, "nm": "S", "ty": 0, "v": { "a": 0, "k": 60 } },
            { "ix": 10, "nm": "S", "ty": 0, "v": { "a": 0, "k": 25 } },
            { "ix": 11, "nm": "", "ty": 6, "v": 0 },
            { "ix": 12, "nm": "F", "ty": 6, "v": 0 },
            { "ix": 13, "nm": "E", "ty": 0, "v": { "a": 0, "k": 10 } },
            { "ix": 14, "nm": "E", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 15, "nm": "D", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 16, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 17, "nm": "B", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 18, "nm": "", "ty": 6, "v": 0 },
            { "ix": 19, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 20, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 21, "nm": "M", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 22, "nm": "O", "ty": 6, "v": 0 },
            { "ix": 23, "nm": "O", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 24, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0.05 } },
            { "ix": 25, "nm": "O", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 26, "nm": "", "ty": 6, "v": 0 },
            { "ix": 27, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 28, "nm": "S", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 29, "nm": "S", "ty": 0, "v": { "a": 0, "k": 100 } },
            { "ix": 30, "nm": "", "ty": 6, "v": 0 },
            { "ix": 31, "nm": "", "ty": 6, "v": 0 },
            { "ix": 32, "nm": "P", "ty": 0, "v": { "a": 0, "k": 1 } }
          ],
          "en": 1
        }
      ],
      "ty": 4
    },
    {
      "ind": 9,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [89.884, 170.026, 0], "l": 2 },
        "a": { "a": 0, "k": [-166.116, -85.974, 0], "l": 2 },
        "s": {
          "k": [
            {
              "i": { "x": [0.667, 0.667, 0.667], "y": [1.0, 1.0, 1.0] },
              "o": { "x": [0.333, 0.333, 0.333], "y": [0.0, 0.0, 0.0] },
              "t": 24,
              "s": [0, 0, 100]
            },
            { "t": 32, "s": [100, 100, 100] }
          ],
          "x": "var $bm_rt;\nvar fx = effect('\u015dlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;",
          "a": 1,
          "l": 2
        }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, -2.674],
                    [2.675, 0.0],
                    [0.0, 2.674],
                    [-2.674, 0.0]
                  ],
                  "o": [
                    [0.0, 2.674],
                    [-2.674, 0.0],
                    [0.0, -2.674],
                    [2.675, 0.0]
                  ],
                  "v": [
                    [-161.273, -85.974],
                    [-166.116, -81.131],
                    [-170.959, -85.974],
                    [-166.116, -90.817]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ef": [
        {
          "ty": 5,
          "ix": 1,
          "nm": "\u015d",
          "ef": [
            { "ix": 1, "nm": "A", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 2, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 3, "nm": "F", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 4, "nm": "A", "ty": 6, "v": 0 },
            { "ix": 5, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 6, "nm": "A", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 7, "nm": "", "ty": 6, "v": 0 },
            { "ix": 8, "nm": "I", "ty": 6, "v": 0 },
            { "ix": 9, "nm": "S", "ty": 0, "v": { "a": 0, "k": 60 } },
            { "ix": 10, "nm": "S", "ty": 0, "v": { "a": 0, "k": 25 } },
            { "ix": 11, "nm": "", "ty": 6, "v": 0 },
            { "ix": 12, "nm": "F", "ty": 6, "v": 0 },
            { "ix": 13, "nm": "E", "ty": 0, "v": { "a": 0, "k": 10 } },
            { "ix": 14, "nm": "E", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 15, "nm": "D", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 16, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 17, "nm": "B", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 18, "nm": "", "ty": 6, "v": 0 },
            { "ix": 19, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 20, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 21, "nm": "M", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 22, "nm": "O", "ty": 6, "v": 0 },
            { "ix": 23, "nm": "O", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 24, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0.05 } },
            { "ix": 25, "nm": "O", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 26, "nm": "", "ty": 6, "v": 0 },
            { "ix": 27, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 28, "nm": "S", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 29, "nm": "S", "ty": 0, "v": { "a": 0, "k": 100 } },
            { "ix": 30, "nm": "", "ty": 6, "v": 0 },
            { "ix": 31, "nm": "", "ty": 6, "v": 0 },
            { "ix": 32, "nm": "P", "ty": 0, "v": { "a": 0, "k": 1 } }
          ],
          "en": 1
        }
      ],
      "ty": 4
    },
    {
      "ind": 10,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [89.884, 170.026, 0], "l": 2 },
        "a": { "a": 0, "k": [-166.116, -85.974, 0], "l": 2 },
        "s": {
          "k": [
            {
              "i": { "x": [0.667, 0.667, 0.667], "y": [1.0, 1.0, 1.0] },
              "o": { "x": [0.333, 0.333, 0.333], "y": [0.0, 0.0, 0.0] },
              "t": 24,
              "s": [0, 0, 100]
            },
            { "t": 32, "s": [100, 100, 100] }
          ],
          "x": "var $bm_rt;\nvar fx = effect('\u015dlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;",
          "a": 1,
          "l": 2
        }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, -2.674],
                    [2.675, 0.0],
                    [0.0, 2.674],
                    [-2.674, 0.0]
                  ],
                  "o": [
                    [0.0, 2.674],
                    [-2.674, 0.0],
                    [0.0, -2.674],
                    [2.675, 0.0]
                  ],
                  "v": [
                    [-161.273, -85.974],
                    [-166.116, -81.131],
                    [-170.959, -85.974],
                    [-166.116, -90.817]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "fl",
          "nm": "F",
          "bm": 0,
          "c": { "a": 0, "k": [1, 0, 0, 1] },
          "o": { "a": 0, "k": 100 },
          "r": 1
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ef": [
        {
          "ty": 5,
          "ix": 1,
          "nm": "\u015d",
          "ef": [
            { "ix": 1, "nm": "A", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 2, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 3, "nm": "F", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 4, "nm": "A", "ty": 6, "v": 0 },
            { "ix": 5, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 6, "nm": "A", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 7, "nm": "", "ty": 6, "v": 0 },
            { "ix": 8, "nm": "I", "ty": 6, "v": 0 },
            { "ix": 9, "nm": "S", "ty": 0, "v": { "a": 0, "k": 60 } },
            { "ix": 10, "nm": "S", "ty": 0, "v": { "a": 0, "k": 25 } },
            { "ix": 11, "nm": "", "ty": 6, "v": 0 },
            { "ix": 12, "nm": "F", "ty": 6, "v": 0 },
            { "ix": 13, "nm": "E", "ty": 0, "v": { "a": 0, "k": 10 } },
            { "ix": 14, "nm": "E", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 15, "nm": "D", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 16, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 17, "nm": "B", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 18, "nm": "", "ty": 6, "v": 0 },
            { "ix": 19, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 20, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 21, "nm": "M", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 22, "nm": "O", "ty": 6, "v": 0 },
            { "ix": 23, "nm": "O", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 24, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0.05 } },
            { "ix": 25, "nm": "O", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 26, "nm": "", "ty": 6, "v": 0 },
            { "ix": 27, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 28, "nm": "S", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 29, "nm": "S", "ty": 0, "v": { "a": 0, "k": 100 } },
            { "ix": 30, "nm": "", "ty": 6, "v": 0 },
            { "ix": 31, "nm": "", "ty": 6, "v": 0 },
            { "ix": 32, "nm": "P", "ty": 0, "v": { "a": 0, "k": 1 } }
          ],
          "en": 1
        }
      ],
      "td": 1,
      "ty": 4
    },
    {
      "ind": 11,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [119.075, 152.954, 0], "l": 2 },
        "a": { "a": 0, "k": [-136.925, -103.046, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-107.734, -85.974],
                    [-166.116, -85.974],
                    [-166.116, -120.117]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "tm",
          "nm": "T",
          "s": { "a": 0, "k": 0 },
          "e": {
            "a": 1,
            "k": [
              {
                "i": { "x": [0.833], "y": [0.833] },
                "o": { "x": [0.167], "y": [0.167] },
                "t": 0,
                "s": [0]
              },
              { "t": 24, "s": [100] }
            ]
          },
          "o": { "a": 0, "k": 0 },
          "m": 1
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "tt": 2,
      "ty": 4
    },
    {
      "ind": 12,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [272.626, 193.739, 0], "l": 2 },
        "a": { "a": 0, "k": [16.626, -62.261, 0], "l": 2 },
        "s": {
          "k": [
            {
              "i": { "x": [0.667, 0.667, 0.667], "y": [1.0, 1.0, 1.0] },
              "o": { "x": [0.333, 0.333, 0.333], "y": [0.0, 0.0, 0.0] },
              "t": 29,
              "s": [-0.206, 100, 100]
            },
            {
              "i": { "x": [0.667, 0.667, 0.667], "y": [1.0, 1.0, 1.0] },
              "o": { "x": [0.333, 0.333, 0.333], "y": [0.0, 0.0, 0.0] },
              "t": 49,
              "s": [100, 100, 100]
            },
            {
              "i": { "x": [0.667, 0.667, 0.667], "y": [1.0, 1.0, 1.0] },
              "o": { "x": [0.333, 0.333, 0.333], "y": [0.0, 0.0, 0.0] },
              "t": 113,
              "s": [100, 100, 100]
            },
            { "t": 125, "s": [-0.206, 100, 100] }
          ],
          "a": 1,
          "l": 2
        }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [16.626, -46.929],
                    [22.721, -46.912]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [27.996, -46.892],
                    [53.348, -46.718]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [57.958, -46.691],
                    [70.759, -46.618]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [16.917, -62.438],
                    [35.647, -62.33]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [41.505, -62.309],
                    [70.764, -62.129]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [17.142, -77.905],
                    [54.945, -77.715]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [61.425, -77.693],
                    [69.492, -77.647]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 29,
      "op": 126,
      "st": 29.0,
      "ty": 4
    },
    {
      "ind": 13,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [193.671, 208.897, 0], "l": 2 },
        "a": { "a": 0, "k": [-62.329, -47.103, 0], "l": 2 },
        "s": {
          "k": [
            {
              "i": { "x": [0.667, 0.667, 0.667], "y": [1.0, 1.0, 1.0] },
              "o": { "x": [0.333, 0.333, 0.333], "y": [0.0, 0.0, 0.0] },
              "t": 9,
              "s": [-0.206, 100, 100]
            },
            {
              "i": { "x": [0.667, 0.667, 0.667], "y": [1.0, 1.0, 1.0] },
              "o": { "x": [0.333, 0.333, 0.333], "y": [0.0, 0.0, 0.0] },
              "t": 29,
              "s": [100, 100, 100]
            },
            {
              "i": { "x": [0.667, 0.667, 0.667], "y": [1.0, 1.0, 1.0] },
              "o": { "x": [0.333, 0.333, 0.333], "y": [0.0, 0.0, 0.0] },
              "t": 113,
              "s": [100, 100, 100]
            },
            { "t": 125, "s": [-0.206, 100, 100] }
          ],
          "a": 1,
          "l": 2
        }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-61.033, -16.329],
                    [-29.799, -16.115]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-25.838, -16.092],
                    [-8.931, -16.027]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-61.078, -31.84],
                    [-46.8, -31.716]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-41.58, -31.678],
                    [-8.927, -31.538]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-61.336, -47.352],
                    [-53.182, -47.343]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-48.204, -47.323],
                    [-22.137, -47.125]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-17.564, -47.099],
                    [-8.922, -47.049]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-62.329, -62.869],
                    [-39.694, -62.738]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [-35.917, -62.716],
                    [-8.917, -62.56]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [[0.0, 0.0]],
                  "o": [[0.0, 0.0]],
                  "v": [[-17.852, -78.122]],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [[0.0, 0.0]],
                  "o": [[0.0, 0.0]],
                  "v": [[-14.125, -78.101]],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 9,
      "op": 126,
      "st": 9.0,
      "ty": 4
    },
    {
      "ind": 14,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [260.813, 215.324, 0], "l": 2 },
        "a": { "a": 0, "k": [4.813, -40.676, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [70.761, -31.424],
                    [70.761, -15.593],
                    [17.366, -15.593],
                    [17.366, -31.424]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "fl",
              "nm": "F",
              "bm": 0,
              "c": { "a": 0, "k": [0, 0, 0, 1] },
              "o": { "a": 0, "k": 100 },
              "r": 1
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "sh",
                      "nm": "P",
                      "ind": 0,
                      "ks": {
                        "k": {
                          "i": [
                            [-0.285, 0.0],
                            [-0.24, 0.095],
                            [-0.188, 0.162],
                            [-0.038, 0.018],
                            [-0.04, 0.0],
                            [-0.031, -0.047],
                            [0.0, 0.0],
                            [0.0, -0.035],
                            [0.049, -0.041],
                            [0.035, -0.024],
                            [0.318, -0.128],
                            [0.36, 0.0],
                            [0.369, 0.158],
                            [0.275, 0.274],
                            [0.158, 0.369],
                            [0.0, 0.422],
                            [-0.158, 0.371],
                            [-0.273, 0.274],
                            [-0.369, 0.159],
                            [-0.421, 0.0],
                            [-0.294, -0.096],
                            [-0.308, -0.216],
                            [-0.035, -0.038],
                            [0.0, -0.039],
                            [0.007, -0.027],
                            [0.007, -0.012],
                            [0.0, 0.0],
                            [0.0, 0.0],
                            [0.064, 0.0],
                            [0.075, 0.064],
                            [0.216, 0.099],
                            [0.252, 0.0],
                            [0.252, -0.109],
                            [0.191, -0.191],
                            [0.111, -0.253],
                            [0.0, -0.285],
                            [-0.111, -0.253],
                            [-0.188, -0.189],
                            [-0.252, -0.111]
                          ],
                          "o": [
                            [0.238, 0.0],
                            [0.242, -0.094],
                            [0.028, -0.024],
                            [0.038, -0.018],
                            [0.054, 0.0],
                            [0.0, 0.0],
                            [0.026, 0.032],
                            [-0.005, 0.055],
                            [-0.047, 0.042],
                            [-0.261, 0.186],
                            [-0.318, 0.128],
                            [-0.421, 0.0],
                            [-0.369, -0.159],
                            [-0.273, -0.274],
                            [-0.158, -0.368],
                            [0.0, -0.418],
                            [0.158, -0.371],
                            [0.275, -0.274],
                            [0.369, -0.16],
                            [0.311, 0.0],
                            [0.296, 0.096],
                            [0.064, 0.044],
                            [0.033, 0.038],
                            [0.0, 0.02],
                            [-0.007, 0.028],
                            [0.0, 0.0],
                            [0.0, 0.0],
                            [-0.04, 0.047],
                            [-0.052, 0.0],
                            [-0.188, -0.142],
                            [-0.216, -0.098],
                            [-0.285, 0.0],
                            [-0.252, 0.111],
                            [-0.188, 0.192],
                            [-0.111, 0.252],
                            [0.0, 0.284],
                            [0.111, 0.252],
                            [0.191, 0.189],
                            [0.252, 0.111]
                          ],
                          "v": [
                            [-38.795, -74.063],
                            [-38.08, -74.206],
                            [-37.435, -74.59],
                            [-37.336, -74.652],
                            [-37.221, -74.679],
                            [-37.092, -74.608],
                            [-36.753, -74.116],
                            [-36.713, -74.016],
                            [-36.79, -73.872],
                            [-36.913, -73.774],
                            [-37.781, -73.303],
                            [-38.795, -73.11],
                            [-39.981, -73.347],
                            [-40.946, -73.995],
                            [-41.593, -74.96],
                            [-41.831, -76.146],
                            [-41.593, -77.329],
                            [-40.946, -78.296],
                            [-39.981, -78.947],
                            [-38.795, -79.187],
                            [-37.885, -79.042],
                            [-36.979, -78.572],
                            [-36.833, -78.451],
                            [-36.783, -78.335],
                            [-36.795, -78.265],
                            [-36.819, -78.205],
                            [-37.143, -77.696],
                            [-37.139, -77.702],
                            [-37.292, -77.631],
                            [-37.482, -77.726],
                            [-38.092, -78.087],
                            [-38.795, -78.234],
                            [-39.6, -78.069],
                            [-40.263, -77.616],
                            [-40.713, -76.951],
                            [-40.878, -76.146],
                            [-40.713, -75.341],
                            [-40.263, -74.679],
                            [-39.6, -74.229]
                          ],
                          "c": true
                        },
                        "a": 0
                      }
                    },
                    {
                      "ty": "fl",
                      "nm": "F",
                      "bm": 0,
                      "c": { "a": 0, "k": [0, 0, 0, 1] },
                      "o": { "a": 0, "k": 100 },
                      "r": 1
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "sh",
                      "nm": "P",
                      "ind": 0,
                      "ks": {
                        "k": {
                          "i": [
                            [0.0, -0.276],
                            [-0.096, -0.246],
                            [-0.165, -0.184],
                            [-0.216, -0.109],
                            [-0.235, 0.0],
                            [-0.214, 0.108],
                            [-0.165, 0.184],
                            [-0.099, 0.247],
                            [0.0, 0.276],
                            [0.099, 0.246],
                            [0.162, 0.186],
                            [0.216, 0.106],
                            [0.238, 0.0],
                            [0.216, -0.107],
                            [0.167, -0.186],
                            [0.096, -0.247]
                          ],
                          "o": [
                            [0.0, 0.276],
                            [0.096, 0.247],
                            [0.167, 0.184],
                            [0.216, 0.108],
                            [0.238, 0.0],
                            [0.216, -0.109],
                            [0.162, -0.184],
                            [0.099, -0.246],
                            [0.0, -0.276],
                            [-0.099, -0.247],
                            [-0.165, -0.186],
                            [-0.214, -0.107],
                            [-0.235, 0.0],
                            [-0.216, 0.106],
                            [-0.165, 0.186],
                            [-0.096, 0.246]
                          ],
                          "v": [
                            [-47.426, -76.134],
                            [-47.283, -75.35],
                            [-46.89, -74.706],
                            [-46.315, -74.267],
                            [-45.635, -74.105],
                            [-44.958, -74.267],
                            [-44.388, -74.706],
                            [-43.995, -75.35],
                            [-43.847, -76.134],
                            [-43.995, -76.918],
                            [-44.388, -77.566],
                            [-44.958, -78.003],
                            [-45.635, -78.163],
                            [-46.315, -78.003],
                            [-46.89, -77.566],
                            [-47.283, -76.918]
                          ],
                          "c": true
                        },
                        "a": 0
                      }
                    },
                    {
                      "ty": "sh",
                      "nm": "P",
                      "ind": 1,
                      "ks": {
                        "k": {
                          "i": [
                            [0.0, 0.0],
                            [-0.066, 0.052],
                            [-0.104, 0.0],
                            [0.0, 0.0],
                            [-0.056, -0.051],
                            [0.0, -0.091],
                            [0.0, 0.0],
                            [-0.299, 0.172],
                            [-0.4, 0.0],
                            [-0.332, -0.158],
                            [-0.245, -0.272],
                            [-0.139, -0.367],
                            [0.0, -0.418],
                            [0.141, -0.365],
                            [0.245, -0.272],
                            [0.329, -0.155],
                            [0.379, 0.0],
                            [0.306, 0.167],
                            [0.193, 0.268],
                            [0.0, 0.0],
                            [0.061, -0.052],
                            [0.101, 0.0],
                            [0.0, 0.0],
                            [0.056, 0.053],
                            [0.0, 0.094]
                          ],
                          "o": [
                            [0.0, -0.091],
                            [0.064, -0.051],
                            [0.0, 0.0],
                            [0.111, 0.0],
                            [0.054, 0.052],
                            [0.0, 0.0],
                            [0.188, -0.276],
                            [0.301, -0.172],
                            [0.379, 0.0],
                            [0.329, 0.158],
                            [0.245, 0.273],
                            [0.141, 0.367],
                            [0.0, 0.418],
                            [-0.139, 0.365],
                            [-0.245, 0.273],
                            [-0.332, 0.155],
                            [-0.381, 0.0],
                            [-0.308, -0.168],
                            [0.0, 0.0],
                            [0.0, 0.098],
                            [-0.061, 0.051],
                            [0.0, 0.0],
                            [-0.106, 0.0],
                            [-0.059, -0.053],
                            [0.0, 0.0]
                          ],
                          "v": [
                            [-48.351, -81.749],
                            [-48.252, -81.962],
                            [-48.0, -82.039],
                            [-47.659, -82.039],
                            [-47.41, -81.962],
                            [-47.327, -81.749],
                            [-47.327, -78.228],
                            [-46.595, -78.9],
                            [-45.544, -79.158],
                            [-44.478, -78.921],
                            [-43.617, -78.276],
                            [-43.04, -77.318],
                            [-42.831, -76.14],
                            [-43.04, -74.966],
                            [-43.617, -74.01],
                            [-44.478, -73.368],
                            [-45.544, -73.134],
                            [-46.577, -73.386],
                            [-47.327, -74.04],
                            [-47.327, -73.554],
                            [-47.419, -73.329],
                            [-47.664, -73.253],
                            [-48.019, -73.253],
                            [-48.264, -73.333],
                            [-48.351, -73.554]
                          ],
                          "c": true
                        },
                        "a": 0
                      }
                    },
                    {
                      "ty": "fl",
                      "nm": "F",
                      "bm": 0,
                      "c": { "a": 0, "k": [0, 0, 0, 1] },
                      "o": { "a": 0, "k": 100 },
                      "r": 1
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "sh",
                      "nm": "P",
                      "ind": 0,
                      "ks": {
                        "k": {
                          "i": [
                            [0.0, 0.0],
                            [0.0, 0.0],
                            [0.0, 0.0]
                          ],
                          "o": [
                            [0.0, 0.0],
                            [0.0, 0.0],
                            [0.0, 0.0]
                          ],
                          "v": [
                            [-55.318, -76.181],
                            [-51.857, -76.181],
                            [-53.579, -80.513]
                          ],
                          "c": true
                        },
                        "a": 0
                      }
                    },
                    {
                      "ty": "sh",
                      "nm": "P",
                      "ind": 1,
                      "ks": {
                        "k": {
                          "i": [
                            [0.0, 0.0],
                            [0.153, 0.0],
                            [0.0, 0.0],
                            [0.0, 0.126],
                            [-0.009, 0.039],
                            [-0.007, 0.012],
                            [-0.325, 0.782],
                            [-0.24, 0.578],
                            [-0.165, 0.394],
                            [-0.108, 0.258],
                            [-0.059, 0.139],
                            [-0.028, 0.066],
                            [-0.007, 0.024],
                            [-0.038, 0.052],
                            [-0.106, 0.0],
                            [0.0, 0.0],
                            [-0.038, -0.051],
                            [-0.019, -0.044],
                            [0.0, 0.0],
                            [-0.014, -0.036],
                            [0.0, -0.024],
                            [0.049, -0.032],
                            [0.08, 0.0],
                            [0.0, 0.0],
                            [0.052, 0.041],
                            [0.028, 0.067],
                            [0.0, 0.0],
                            [0.0, 0.0]
                          ],
                          "o": [
                            [-0.061, 0.158],
                            [0.0, 0.0],
                            [-0.169, 0.0],
                            [0.0, -0.035],
                            [0.002, -0.016],
                            [0.426, -1.025],
                            [0.327, -0.784],
                            [0.24, -0.579],
                            [0.167, -0.394],
                            [0.106, -0.259],
                            [0.059, -0.138],
                            [0.026, -0.065],
                            [0.016, -0.044],
                            [0.038, -0.051],
                            [0.0, 0.0],
                            [0.099, 0.0],
                            [0.038, 0.052],
                            [0.0, 0.0],
                            [0.0, 0.005],
                            [0.012, 0.035],
                            [0.0, 0.064],
                            [-0.049, 0.032],
                            [0.0, 0.0],
                            [-0.08, 0.0],
                            [-0.054, -0.041],
                            [0.0, 0.0],
                            [0.0, 0.0],
                            [0.0, 0.0]
                          ],
                          "v": [
                            [-56.415, -73.489],
                            [-56.739, -73.253],
                            [-57.248, -73.253],
                            [-57.502, -73.442],
                            [-57.49, -73.554],
                            [-57.473, -73.596],
                            [-56.346, -76.308],
                            [-55.497, -78.349],
                            [-54.887, -79.808],
                            [-54.478, -80.787],
                            [-54.231, -81.382],
                            [-54.099, -81.687],
                            [-54.047, -81.82],
                            [-53.967, -81.962],
                            [-53.751, -82.039],
                            [-53.403, -82.039],
                            [-53.198, -81.962],
                            [-53.113, -81.82],
                            [-49.704, -73.59],
                            [-49.683, -73.53],
                            [-49.664, -73.442],
                            [-49.737, -73.3],
                            [-49.93, -73.253],
                            [-50.438, -73.253],
                            [-50.636, -73.315],
                            [-50.758, -73.477],
                            [-51.443, -75.175],
                            [-55.746, -75.175]
                          ],
                          "c": true
                        },
                        "a": 0
                      }
                    },
                    {
                      "ty": "fl",
                      "nm": "F",
                      "bm": 0,
                      "c": { "a": 0, "k": [0, 0, 0, 1] },
                      "o": { "a": 0, "k": 100 },
                      "r": 1
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [3.903, -3.494],
                        [0.964, -1.47],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [-1.542, 1.398],
                        [-5.132, 0.506],
                        [0.0, 0.0],
                        [0.0, 0.0]
                      ],
                      "o": [
                        [0.0, 0.0],
                        [-5.132, 0.53],
                        [-1.542, 1.398],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.939, -1.47],
                        [3.904, -3.494],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0]
                      ],
                      "v": [
                        [79.555, -4.148],
                        [22.137, -4.895],
                        [8.162, 1.177],
                        [4.355, 5.562],
                        [3.97, -78.673],
                        [3.946, -81.926],
                        [7.897, -86.312],
                        [21.872, -92.383],
                        [79.29, -91.661],
                        [79.338, -78.24]
                      ],
                      "c": true
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "st",
                  "nm": "S",
                  "bm": 0,
                  "lc": 2,
                  "lj": 2,
                  "o": { "a": 0, "k": 100 },
                  "w": { "a": 0, "k": 1.205 },
                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.0, 0.0],
                        [1.566, 1.277],
                        [5.132, 0.121],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [-3.927, -3.181],
                        [-0.964, -1.398],
                        [0.0, 0.0]
                      ],
                      "o": [
                        [-0.939, -1.398],
                        [-3.927, -3.181],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [5.132, 0.145],
                        [1.566, 1.277],
                        [0.0, 0.0],
                        [0.0, 0.0]
                      ],
                      "v": [
                        [4.355, 5.562],
                        [0.548, 1.466],
                        [-13.451, -3.522],
                        [-69.737, -4.341],
                        [-70.098, -79.083],
                        [-70.17, -91.853],
                        [-13.885, -91.034],
                        [0.114, -86.023],
                        [3.946, -81.926],
                        [3.97, -78.673]
                      ],
                      "c": true
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "st",
                  "nm": "S",
                  "bm": 0,
                  "lc": 2,
                  "lj": 2,
                  "o": { "a": 0, "k": 100 },
                  "w": { "a": 0, "k": 1.205 },
                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.0, 0.0],
                        [0.169, -0.554],
                        [2.578, 0.024],
                        [0.0, 0.0],
                        [-0.024, 3.012],
                        [0.0, 0.0],
                        [-2.265, 0.819],
                        [-0.699, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [-3.927, -3.181],
                        [-0.939, -1.398],
                        [-1.542, 1.398],
                        [-5.132, 0.53],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, -3.036]
                      ],
                      "o": [
                        [0.0, 0.602],
                        [-0.771, 2.361],
                        [0.0, 0.0],
                        [-3.036, 0.0],
                        [0.0, 0.0],
                        [0.0, -2.506],
                        [0.602, -0.217],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [5.132, 0.121],
                        [1.566, 1.277],
                        [0.964, -1.47],
                        [3.903, -3.494],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [3.012, 0.024],
                        [0.0, 0.0]
                      ],
                      "v": [
                        [86.567, 5.201],
                        [86.302, 6.96],
                        [80.711, 11.032],
                        [-71.52, 10.188],
                        [-76.917, 4.767],
                        [-76.941, -73.252],
                        [-73.062, -78.746],
                        [-71.086, -79.083],
                        [-70.098, -79.083],
                        [-69.737, -4.341],
                        [-13.451, -3.522],
                        [0.548, 1.466],
                        [4.355, 5.562],
                        [8.162, 1.177],
                        [22.137, -4.895],
                        [79.555, -4.148],
                        [79.338, -78.24],
                        [81.146, -78.24],
                        [86.543, -72.794]
                      ],
                      "c": true
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "st",
                  "nm": "S",
                  "bm": 0,
                  "lc": 2,
                  "lj": 2,
                  "o": { "a": 0, "k": 100 },
                  "w": { "a": 0, "k": 1.205 },
                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ty": 4
    },
    {
      "ind": 15,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [351, 248.779, 0], "l": 2 },
        "a": { "a": 0, "k": [95, -7.221, 0], "l": 2 },
        "s": {
          "k": [
            {
              "i": { "x": [0.667, 0.667, 0.667], "y": [1.0, 1.0, 1.0] },
              "o": { "x": [0.333, 0.333, 0.333], "y": [0.0, 0.0, 0.0] },
              "t": 0,
              "s": [0, 0, 100]
            },
            { "t": 8, "s": [100, 100, 100] }
          ],
          "x": "var $bm_rt;\nvar fx = effect('\u015dlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;",
          "a": 1,
          "l": 2
        }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [186.825, 20.872],
                    [186.825, 31.753],
                    [164.323, 31.753],
                    [164.323, 20.872]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "sh",
                          "nm": "P",
                          "ind": 0,
                          "ks": {
                            "k": {
                              "i": [
                                [-2.052, -3.996],
                                [4.467, 0.0],
                                [2.565, 3.27],
                                [-4.787, 0.0]
                              ],
                              "o": [
                                [-2.565, 3.248],
                                [-4.488, 0.0],
                                [2.073, -3.975],
                                [4.809, 0.0]
                              ],
                              "v": [
                                [129.934, 39.82],
                                [118.906, 45.162],
                                [107.878, 39.798],
                                [118.906, 33.109]
                              ],
                              "c": true
                            },
                            "a": 0
                          }
                        },
                        {
                          "ty": "st",
                          "nm": "S",
                          "bm": 0,
                          "lc": 2,
                          "lj": 2,
                          "o": { "a": 0, "k": 100 },
                          "w": { "a": 0, "k": 1.205 },
                          "c": { "a": 0, "k": [0, 0, 0, 1] }
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "sh",
                          "nm": "P",
                          "ind": 0,
                          "ks": {
                            "k": {
                              "i": [
                                [0.0, -1.815],
                                [1.815, 0.0],
                                [0.0, 1.82],
                                [-1.815, 0.0]
                              ],
                              "o": [
                                [0.0, 1.82],
                                [-1.815, 0.0],
                                [0.0, -1.815],
                                [1.815, 0.0]
                              ],
                              "v": [
                                [122.191, 25.551],
                                [118.901, 28.84],
                                [115.612, 25.551],
                                [118.901, 22.261]
                              ],
                              "c": true
                            },
                            "a": 0
                          }
                        },
                        {
                          "ty": "st",
                          "nm": "S",
                          "bm": 0,
                          "lc": 2,
                          "lj": 2,
                          "o": { "a": 0, "k": 100 },
                          "w": { "a": 0, "k": 1.205 },
                          "c": { "a": 0, "k": [0, 0, 0, 1] }
                        },
                        {
                          "ty": "fl",
                          "nm": "F",
                          "bm": 0,
                          "c": { "a": 0, "k": [0, 0, 0, 1] },
                          "o": { "a": 0, "k": 100 },
                          "r": 1
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "sh",
                          "nm": "P",
                          "ind": 0,
                          "ks": {
                            "k": {
                              "i": [
                                [0.0, -7.758],
                                [1.902, -2.394],
                                [4.467, 0.0],
                                [2.565, 3.27],
                                [0.0, 3.291],
                                [-7.758, 0.0]
                              ],
                              "o": [
                                [0.0, 3.291],
                                [-2.565, 3.248],
                                [-4.488, 0.0],
                                [-1.902, -2.394],
                                [0.0, -7.758],
                                [7.758, 0.0]
                              ],
                              "v": [
                                [132.969, 31.1],
                                [129.934, 39.82],
                                [118.906, 45.162],
                                [107.878, 39.798],
                                [104.844, 31.1],
                                [118.906, 17.037]
                              ],
                              "c": true
                            },
                            "a": 0
                          }
                        },
                        {
                          "ty": "st",
                          "nm": "S",
                          "bm": 0,
                          "lc": 2,
                          "lj": 2,
                          "o": { "a": 0, "k": 100 },
                          "w": { "a": 0, "k": 1.205 },
                          "c": { "a": 0, "k": [0, 0, 0, 1] }
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "sh",
                          "nm": "P",
                          "ind": 0,
                          "ks": {
                            "k": {
                              "i": [
                                [0.0, 0.0],
                                [0.0, 0.0]
                              ],
                              "o": [
                                [0.0, 0.0],
                                [0.0, 0.0]
                              ],
                              "v": [
                                [191.293, 2.605],
                                [186.819, -1.87]
                              ],
                              "c": false
                            },
                            "a": 0
                          }
                        },
                        {
                          "ty": "st",
                          "nm": "S",
                          "bm": 0,
                          "lc": 2,
                          "lj": 2,
                          "o": { "a": 0, "k": 100 },
                          "w": { "a": 0, "k": 1.205 },
                          "c": { "a": 0, "k": [0, 0, 0, 1] }
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "sh",
                          "nm": "P",
                          "ind": 0,
                          "ks": {
                            "k": {
                              "i": [
                                [0.0, 0.0],
                                [0.0, 0.0]
                              ],
                              "o": [
                                [0.0, 0.0],
                                [0.0, 0.0]
                              ],
                              "v": [
                                [191.293, -1.869],
                                [186.819, 2.605]
                              ],
                              "c": false
                            },
                            "a": 0
                          }
                        },
                        {
                          "ty": "st",
                          "nm": "S",
                          "bm": 0,
                          "lc": 2,
                          "lj": 2,
                          "o": { "a": 0, "k": 100 },
                          "w": { "a": 0, "k": 1.205 },
                          "c": { "a": 0, "k": [0, 0, 0, 1] }
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "gr",
                          "nm": "G",
                          "bm": 0,
                          "it": [
                            {
                              "ty": "sh",
                              "nm": "P",
                              "ind": 0,
                              "ks": {
                                "k": {
                                  "i": [
                                    [0.0, 0.0],
                                    [0.0, 0.0]
                                  ],
                                  "o": [
                                    [0.0, 0.0],
                                    [0.0, 0.0]
                                  ],
                                  "v": [
                                    [102.974, 0.367],
                                    [158.309, 0.367]
                                  ],
                                  "c": false
                                },
                                "a": 0
                              }
                            },
                            {
                              "ty": "st",
                              "nm": "S",
                              "bm": 0,
                              "lc": 2,
                              "lj": 2,
                              "o": { "a": 0, "k": 100 },
                              "w": { "a": 0, "k": 1.205 },
                              "c": { "a": 0, "k": [0, 0, 0, 1] }
                            },
                            {
                              "ty": "tr",
                              "o": { "a": 0, "k": 100 },
                              "r": { "a": 0, "k": 0 },
                              "p": { "a": 0, "k": [0, 0] },
                              "a": { "a": 0, "k": [0, 0] },
                              "s": { "a": 0, "k": [100, 100] },
                              "nm": "T",
                              "sk": { "a": 0, "k": 0 },
                              "sa": { "a": 0, "k": 0 }
                            }
                          ]
                        },
                        {
                          "ty": "gr",
                          "nm": "G",
                          "bm": 0,
                          "it": [
                            {
                              "ty": "gr",
                              "nm": "G",
                              "bm": 0,
                              "it": [
                                {
                                  "ty": "gr",
                                  "nm": "G",
                                  "bm": 0,
                                  "it": [
                                    {
                                      "ty": "gr",
                                      "nm": "G",
                                      "bm": 0,
                                      "it": [
                                        {
                                          "ty": "gr",
                                          "nm": "G",
                                          "bm": 0,
                                          "it": [
                                            {
                                              "ty": "sh",
                                              "nm": "P",
                                              "ind": 0,
                                              "ks": {
                                                "k": {
                                                  "i": [
                                                    [0.0, 0.0],
                                                    [0.0, 0.0],
                                                    [0.0, 0.0],
                                                    [0.0, 0.0]
                                                  ],
                                                  "o": [
                                                    [0.0, 0.0],
                                                    [0.0, 0.0],
                                                    [0.0, 0.0],
                                                    [0.0, 0.0]
                                                  ],
                                                  "v": [
                                                    [180.997, -7.221],
                                                    [180.997, 7.939],
                                                    [196.659, 7.939],
                                                    [196.659, -7.221]
                                                  ],
                                                  "c": true
                                                },
                                                "a": 0
                                              }
                                            },
                                            {
                                              "ty": "st",
                                              "nm": "S",
                                              "bm": 0,
                                              "lc": 2,
                                              "lj": 2,
                                              "o": { "a": 0, "k": 100 },
                                              "w": { "a": 0, "k": 1.205 },
                                              "c": { "a": 0, "k": [0, 0, 0, 1] }
                                            },
                                            {
                                              "ty": "tr",
                                              "o": { "a": 0, "k": 100 },
                                              "r": { "a": 0, "k": 0 },
                                              "p": { "a": 0, "k": [0, 0] },
                                              "a": { "a": 0, "k": [0, 0] },
                                              "s": { "a": 0, "k": [100, 100] },
                                              "nm": "T",
                                              "sk": { "a": 0, "k": 0 },
                                              "sa": { "a": 0, "k": 0 }
                                            }
                                          ]
                                        },
                                        {
                                          "ty": "gr",
                                          "nm": "G",
                                          "bm": 0,
                                          "it": [
                                            {
                                              "ty": "sh",
                                              "nm": "P",
                                              "ind": 0,
                                              "ks": {
                                                "k": {
                                                  "i": [
                                                    [0.0, 0.0],
                                                    [0.0, 0.0],
                                                    [0.0, 0.0],
                                                    [0.0, 0.0]
                                                  ],
                                                  "o": [
                                                    [0.0, 0.0],
                                                    [0.0, 0.0],
                                                    [0.0, 0.0],
                                                    [0.0, 0.0]
                                                  ],
                                                  "v": [
                                                    [196.68, -7.208],
                                                    [196.68, 7.947],
                                                    [95.0, 7.947],
                                                    [95.0, -7.208]
                                                  ],
                                                  "c": true
                                                },
                                                "a": 0
                                              }
                                            },
                                            {
                                              "ty": "st",
                                              "nm": "S",
                                              "bm": 0,
                                              "lc": 2,
                                              "lj": 2,
                                              "o": { "a": 0, "k": 100 },
                                              "w": { "a": 0, "k": 1.205 },
                                              "c": { "a": 0, "k": [0, 0, 0, 1] }
                                            },
                                            {
                                              "ty": "tr",
                                              "o": { "a": 0, "k": 100 },
                                              "r": { "a": 0, "k": 0 },
                                              "p": { "a": 0, "k": [0, 0] },
                                              "a": { "a": 0, "k": [0, 0] },
                                              "s": { "a": 0, "k": [100, 100] },
                                              "nm": "T",
                                              "sk": { "a": 0, "k": 0 },
                                              "sa": { "a": 0, "k": 0 }
                                            }
                                          ]
                                        },
                                        {
                                          "ty": "gr",
                                          "nm": "G",
                                          "bm": 0,
                                          "it": [
                                            {
                                              "ty": "sh",
                                              "nm": "P",
                                              "ind": 0,
                                              "ks": {
                                                "k": {
                                                  "i": [
                                                    [0.0, 0.0],
                                                    [0.0, 0.0],
                                                    [0.0, 0.0],
                                                    [0.0, 0.0]
                                                  ],
                                                  "o": [
                                                    [0.0, 0.0],
                                                    [0.0, 0.0],
                                                    [0.0, 0.0],
                                                    [0.0, 0.0]
                                                  ],
                                                  "v": [
                                                    [196.68, 7.947],
                                                    [196.68, 74.136],
                                                    [95.0, 74.136],
                                                    [95.0, 7.947]
                                                  ],
                                                  "c": true
                                                },
                                                "a": 0
                                              }
                                            },
                                            {
                                              "ty": "st",
                                              "nm": "S",
                                              "bm": 0,
                                              "lc": 2,
                                              "lj": 2,
                                              "o": { "a": 0, "k": 100 },
                                              "w": { "a": 0, "k": 1.205 },
                                              "c": { "a": 0, "k": [0, 0, 0, 1] }
                                            },
                                            {
                                              "ty": "tr",
                                              "o": { "a": 0, "k": 100 },
                                              "r": { "a": 0, "k": 0 },
                                              "p": { "a": 0, "k": [0, 0] },
                                              "a": { "a": 0, "k": [0, 0] },
                                              "s": { "a": 0, "k": [100, 100] },
                                              "nm": "T",
                                              "sk": { "a": 0, "k": 0 },
                                              "sa": { "a": 0, "k": 0 }
                                            }
                                          ]
                                        },
                                        {
                                          "ty": "tr",
                                          "o": { "a": 0, "k": 100 },
                                          "r": { "a": 0, "k": 0 },
                                          "p": { "a": 0, "k": [0, 0] },
                                          "a": { "a": 0, "k": [0, 0] },
                                          "s": { "a": 0, "k": [100, 100] },
                                          "nm": "T",
                                          "sk": { "a": 0, "k": 0 },
                                          "sa": { "a": 0, "k": 0 }
                                        }
                                      ]
                                    },
                                    {
                                      "ty": "tr",
                                      "o": { "a": 0, "k": 100 },
                                      "r": { "a": 0, "k": 0 },
                                      "p": { "a": 0, "k": [0, 0] },
                                      "a": { "a": 0, "k": [0, 0] },
                                      "s": { "a": 0, "k": [100, 100] },
                                      "nm": "T",
                                      "sk": { "a": 0, "k": 0 },
                                      "sa": { "a": 0, "k": 0 }
                                    }
                                  ]
                                },
                                {
                                  "ty": "tr",
                                  "o": { "a": 0, "k": 100 },
                                  "r": { "a": 0, "k": 0 },
                                  "p": { "a": 0, "k": [0, 0] },
                                  "a": { "a": 0, "k": [0, 0] },
                                  "s": { "a": 0, "k": [100, 100] },
                                  "nm": "T",
                                  "sk": { "a": 0, "k": 0 },
                                  "sa": { "a": 0, "k": 0 }
                                }
                              ]
                            },
                            {
                              "ty": "tr",
                              "o": { "a": 0, "k": 100 },
                              "r": { "a": 0, "k": 0 },
                              "p": { "a": 0, "k": [0, 0] },
                              "a": { "a": 0, "k": [0, 0] },
                              "s": { "a": 0, "k": [100, 100] },
                              "nm": "T",
                              "sk": { "a": 0, "k": 0 },
                              "sa": { "a": 0, "k": 0 }
                            }
                          ]
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ef": [
        {
          "ty": 5,
          "ix": 1,
          "nm": "\u015d",
          "ef": [
            { "ix": 1, "nm": "A", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 2, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 3, "nm": "F", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 4, "nm": "A", "ty": 6, "v": 0 },
            { "ix": 5, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 6, "nm": "A", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 7, "nm": "", "ty": 6, "v": 0 },
            { "ix": 8, "nm": "I", "ty": 6, "v": 0 },
            { "ix": 9, "nm": "S", "ty": 0, "v": { "a": 0, "k": 60 } },
            { "ix": 10, "nm": "S", "ty": 0, "v": { "a": 0, "k": 25 } },
            { "ix": 11, "nm": "", "ty": 6, "v": 0 },
            { "ix": 12, "nm": "F", "ty": 6, "v": 0 },
            { "ix": 13, "nm": "E", "ty": 0, "v": { "a": 0, "k": 10 } },
            { "ix": 14, "nm": "E", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 15, "nm": "D", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 16, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 17, "nm": "B", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 18, "nm": "", "ty": 6, "v": 0 },
            { "ix": 19, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 20, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 21, "nm": "M", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 22, "nm": "O", "ty": 6, "v": 0 },
            { "ix": 23, "nm": "O", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 24, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0.05 } },
            { "ix": 25, "nm": "O", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 26, "nm": "", "ty": 6, "v": 0 },
            { "ix": 27, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 28, "nm": "S", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 29, "nm": "S", "ty": 0, "v": { "a": 0, "k": 100 } },
            { "ix": 30, "nm": "", "ty": 6, "v": 0 },
            { "ix": 31, "nm": "", "ty": 6, "v": 0 },
            { "ix": 32, "nm": "P", "ty": 0, "v": { "a": 0, "k": 1 } }
          ],
          "en": 1
        }
      ],
      "ty": 4
    },
    {
      "ind": 16,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [401.834, 298.862, 0], "l": 2 },
        "a": { "a": 0, "k": [145.834, 42.862, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [171.163, 42.862],
                    [186.825, 42.862]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [104.844, 65.079],
                    [115.612, 65.079]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [124.398, 65.079],
                    [149.417, 65.079]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [160.667, 65.079],
                    [186.825, 65.079]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [104.844, 53.971],
                    [126.032, 53.971]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [137.142, 53.971],
                    [167.856, 53.971]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [177.005, 53.971],
                    [186.825, 53.971]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [141.489, 42.862],
                    [164.323, 42.862]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [141.489, 31.753],
                    [157.346, 31.753]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [141.489, 20.644],
                    [157.346, 20.644]
                  ],
                  "c": false
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "tm",
          "nm": "T",
          "s": {
            "a": 1,
            "k": [
              {
                "i": { "x": [0.667], "y": [1.0] },
                "o": { "x": [0.333], "y": [0.0] },
                "t": 88,
                "s": [0]
              },
              { "t": 113, "s": [100] }
            ]
          },
          "e": {
            "a": 1,
            "k": [
              {
                "i": { "x": [0.667], "y": [1.0] },
                "o": { "x": [0.333], "y": [0.0] },
                "t": 19,
                "s": [0]
              },
              { "t": 44, "s": [100] }
            ]
          },
          "o": { "a": 0, "k": 0 },
          "m": 1
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ty": 4
    },
    {
      "ind": 17,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [351, 248.79, 0], "l": 2 },
        "a": { "a": 0, "k": [95, -7.21, 0], "l": 2 },
        "s": {
          "k": [
            {
              "i": { "x": [0.667, 0.667, 0.667], "y": [1.0, 1.0, 1.0] },
              "o": { "x": [0.333, 0.333, 0.333], "y": [0.0, 0.0, 0.0] },
              "t": 0,
              "s": [0, 0, 100]
            },
            { "t": 8, "s": [100, 100, 100] }
          ],
          "x": "var $bm_rt;\nvar fx = effect('\u015dlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;",
          "a": 1,
          "l": 2
        }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [196.68, -7.21],
                    [196.68, 74.14],
                    [95.0, 74.14],
                    [95.0, -7.21]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "fl",
              "nm": "F",
              "bm": 0,
              "c": { "a": 0, "k": [0, 0, 0, 1] },
              "o": { "a": 0, "k": 100 },
              "r": 1
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ef": [
        {
          "ty": 5,
          "ix": 1,
          "nm": "\u015d",
          "ef": [
            { "ix": 1, "nm": "A", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 2, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 3, "nm": "F", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 4, "nm": "A", "ty": 6, "v": 0 },
            { "ix": 5, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 6, "nm": "A", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 7, "nm": "", "ty": 6, "v": 0 },
            { "ix": 8, "nm": "I", "ty": 6, "v": 0 },
            { "ix": 9, "nm": "S", "ty": 0, "v": { "a": 0, "k": 60 } },
            { "ix": 10, "nm": "S", "ty": 0, "v": { "a": 0, "k": 25 } },
            { "ix": 11, "nm": "", "ty": 6, "v": 0 },
            { "ix": 12, "nm": "F", "ty": 6, "v": 0 },
            { "ix": 13, "nm": "E", "ty": 0, "v": { "a": 0, "k": 10 } },
            { "ix": 14, "nm": "E", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 15, "nm": "D", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 16, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 17, "nm": "B", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 18, "nm": "", "ty": 6, "v": 0 },
            { "ix": 19, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 20, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 21, "nm": "M", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 22, "nm": "O", "ty": 6, "v": 0 },
            { "ix": 23, "nm": "O", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 24, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0.05 } },
            { "ix": 25, "nm": "O", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 26, "nm": "", "ty": 6, "v": 0 },
            { "ix": 27, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 28, "nm": "S", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 29, "nm": "S", "ty": 0, "v": { "a": 0, "k": 100 } },
            { "ix": 30, "nm": "", "ty": 6, "v": 0 },
            { "ix": 31, "nm": "", "ty": 6, "v": 0 },
            { "ix": 32, "nm": "P", "ty": 0, "v": { "a": 0, "k": 1 } }
          ],
          "en": 1
        }
      ],
      "td": 1,
      "ty": 4
    },
    {
      "ind": 18,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [260.813, 336.194, 0], "l": 2 },
        "a": { "a": 0, "k": [4.813, 80.194, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0]
                      ],
                      "o": [
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0]
                      ],
                      "v": [
                        [-5.964, 26.525],
                        [109.987, 26.525],
                        [109.987, -105.612],
                        [-5.964, -105.612]
                      ],
                      "c": false
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "st",
                  "nm": "S",
                  "bm": 0,
                  "lc": 2,
                  "lj": 2,
                  "o": { "a": 0, "k": 100 },
                  "w": { "a": 0, "k": 1.205 },
                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 3.084],
                        [0.0, 0.0],
                        [3.084, 0.0],
                        [0.0, 0.0]
                      ],
                      "o": [
                        [0.0, 0.0],
                        [3.084, 0.0],
                        [0.0, 0.0],
                        [0.0, -3.108],
                        [0.0, 0.0],
                        [0.0, 0.0]
                      ],
                      "v": [
                        [-5.964, 49.077],
                        [111.746, 49.077],
                        [117.36, 43.463],
                        [117.36, -107.346],
                        [111.746, -112.961],
                        [-5.964, -112.961]
                      ],
                      "c": false
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "st",
                  "nm": "S",
                  "bm": 0,
                  "lc": 2,
                  "lj": 2,
                  "o": { "a": 0, "k": 100 },
                  "w": { "a": 0, "k": 1.205 },
                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0]
                      ],
                      "o": [
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, 0.0]
                      ],
                      "v": [
                        [41.114, -105.612],
                        [-100.361, -105.612],
                        [-100.361, 26.525],
                        [41.114, 26.525]
                      ],
                      "c": false
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "st",
                  "nm": "S",
                  "bm": 0,
                  "lc": 2,
                  "lj": 2,
                  "o": { "a": 0, "k": 100 },
                  "w": { "a": 0, "k": 1.205 },
                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "sh",
                  "nm": "P",
                  "ind": 0,
                  "ks": {
                    "k": {
                      "i": [
                        [0.0, 0.0],
                        [0.0, 0.0],
                        [0.0, -3.108],
                        [0.0, 0.0],
                        [-3.084, 0.0],
                        [0.0, 0.0]
                      ],
                      "o": [
                        [0.0, 0.0],
                        [-3.084, 0.0],
                        [0.0, 0.0],
                        [0.0, 3.084],
                        [0.0, 0.0],
                        [0.0, 0.0]
                      ],
                      "v": [
                        [41.114, -112.961],
                        [-102.12, -112.961],
                        [-107.734, -107.346],
                        [-107.734, 43.463],
                        [-102.12, 49.077],
                        [41.114, 49.077]
                      ],
                      "c": false
                    },
                    "a": 0
                  }
                },
                {
                  "ty": "st",
                  "nm": "S",
                  "bm": 0,
                  "lc": 2,
                  "lj": 2,
                  "o": { "a": 0, "k": 100 },
                  "w": { "a": 0, "k": 1.205 },
                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "gr",
                          "nm": "G",
                          "bm": 0,
                          "it": [
                            {
                              "ty": "gr",
                              "nm": "G",
                              "bm": 0,
                              "it": [
                                {
                                  "ty": "sh",
                                  "nm": "P",
                                  "ind": 0,
                                  "ks": {
                                    "k": {
                                      "i": [
                                        [0.0, -2.488],
                                        [2.488, 0.0],
                                        [0.0, 2.488],
                                        [-2.488, 0.0]
                                      ],
                                      "o": [
                                        [0.0, 2.488],
                                        [-2.488, 0.0],
                                        [0.0, -2.488],
                                        [2.488, 0.0]
                                      ],
                                      "v": [
                                        [9.328, 37.805],
                                        [4.812, 42.3],
                                        [0.296, 37.805],
                                        [4.812, 33.289]
                                      ],
                                      "c": true
                                    },
                                    "a": 0
                                  }
                                },
                                {
                                  "ty": "st",
                                  "nm": "S",
                                  "bm": 0,
                                  "lc": 2,
                                  "lj": 2,
                                  "o": { "a": 0, "k": 100 },
                                  "w": { "a": 0, "k": 1.205 },
                                  "c": { "a": 0, "k": [0, 0, 0, 1] }
                                },
                                {
                                  "ty": "tr",
                                  "o": { "a": 0, "k": 100 },
                                  "r": { "a": 0, "k": 0 },
                                  "p": { "a": 0, "k": [0, 0] },
                                  "a": { "a": 0, "k": [0, 0] },
                                  "s": { "a": 0, "k": [100, 100] },
                                  "nm": "T",
                                  "sk": { "a": 0, "k": 0 },
                                  "sa": { "a": 0, "k": 0 }
                                }
                              ]
                            },
                            {
                              "ty": "gr",
                              "nm": "G",
                              "bm": 0,
                              "it": [
                                {
                                  "ty": "gr",
                                  "nm": "G",
                                  "bm": 0,
                                  "it": [
                                    {
                                      "ty": "sh",
                                      "nm": "P",
                                      "ind": 0,
                                      "ks": {
                                        "k": {
                                          "i": [
                                            [0.0, 0.0],
                                            [0.0, 0.0]
                                          ],
                                          "o": [
                                            [0.0, 0.0],
                                            [0.0, 0.0]
                                          ],
                                          "v": [
                                            [74.986, 80.194],
                                            [-61.969, 80.194]
                                          ],
                                          "c": false
                                        },
                                        "a": 0
                                      }
                                    },
                                    {
                                      "ty": "st",
                                      "nm": "S",
                                      "bm": 0,
                                      "lc": 2,
                                      "lj": 2,
                                      "o": { "a": 0, "k": 100 },
                                      "w": { "a": 0, "k": 1.205 },
                                      "c": { "a": 0, "k": [0, 0, 0, 1] }
                                    },
                                    {
                                      "ty": "tr",
                                      "o": { "a": 0, "k": 100 },
                                      "r": { "a": 0, "k": 0 },
                                      "p": { "a": 0, "k": [0, 0] },
                                      "a": { "a": 0, "k": [0, 0] },
                                      "s": { "a": 0, "k": [100, 100] },
                                      "nm": "T",
                                      "sk": { "a": 0, "k": 0 },
                                      "sa": { "a": 0, "k": 0 }
                                    }
                                  ]
                                },
                                {
                                  "ty": "gr",
                                  "nm": "G",
                                  "bm": 0,
                                  "it": [
                                    {
                                      "ty": "sh",
                                      "nm": "P",
                                      "ind": 0,
                                      "ks": {
                                        "k": {
                                          "i": [
                                            [-11.504, -6.387],
                                            [0.0, 0.0],
                                            [2.003, 13.607],
                                            [0.0, 0.0]
                                          ],
                                          "o": [
                                            [0.0, 0.0],
                                            [11.504, -6.387],
                                            [0.0, 0.0],
                                            [-2.003, 13.607]
                                          ],
                                          "v": [
                                            [46.838, 80.194],
                                            [-33.821, 80.194],
                                            [-21.682, 49.073],
                                            [34.699, 49.073]
                                          ],
                                          "c": true
                                        },
                                        "a": 0
                                      }
                                    },
                                    {
                                      "ty": "st",
                                      "nm": "S",
                                      "bm": 0,
                                      "lc": 2,
                                      "lj": 2,
                                      "o": { "a": 0, "k": 100 },
                                      "w": { "a": 0, "k": 1.205 },
                                      "c": { "a": 0, "k": [0, 0, 0, 1] }
                                    },
                                    {
                                      "ty": "tr",
                                      "o": { "a": 0, "k": 100 },
                                      "r": { "a": 0, "k": 0 },
                                      "p": { "a": 0, "k": [0, 0] },
                                      "a": { "a": 0, "k": [0, 0] },
                                      "s": { "a": 0, "k": [100, 100] },
                                      "nm": "T",
                                      "sk": { "a": 0, "k": 0 },
                                      "sa": { "a": 0, "k": 0 }
                                    }
                                  ]
                                },
                                {
                                  "ty": "tr",
                                  "o": { "a": 0, "k": 100 },
                                  "r": { "a": 0, "k": 0 },
                                  "p": { "a": 0, "k": [0, 0] },
                                  "a": { "a": 0, "k": [0, 0] },
                                  "s": { "a": 0, "k": [100, 100] },
                                  "nm": "T",
                                  "sk": { "a": 0, "k": 0 },
                                  "sa": { "a": 0, "k": 0 }
                                }
                              ]
                            },
                            {
                              "ty": "tr",
                              "o": { "a": 0, "k": 100 },
                              "r": { "a": 0, "k": 0 },
                              "p": { "a": 0, "k": [0, 0] },
                              "a": { "a": 0, "k": [0, 0] },
                              "s": { "a": 0, "k": [100, 100] },
                              "nm": "T",
                              "sk": { "a": 0, "k": 0 },
                              "sa": { "a": 0, "k": 0 }
                            }
                          ]
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "tt": 2,
      "ty": 4
    },
    {
      "ind": 19,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": {
          "k": [
            {
              "i": { "x": 0.667, "y": 1.0 },
              "o": { "x": 0.333, "y": 0.0 },
              "t": 0,
              "s": [431.742, 197.976, 0],
              "ti": [0, 0, 0],
              "to": [-6.667, 0, 0]
            },
            {
              "i": { "x": 0.667, "y": 1.0 },
              "o": { "x": 0.333, "y": 0.0 },
              "t": 31.25,
              "s": [391.742, 197.976, 0],
              "ti": [0, 0, 0],
              "to": [0, 0, 0]
            },
            {
              "i": { "x": 0.667, "y": 1.0 },
              "o": { "x": 0.333, "y": 0.0 },
              "t": 62,
              "s": [431.742, 197.976, 0],
              "ti": [0, 0, 0],
              "to": [0, 0, 0]
            },
            {
              "i": { "x": 0.667, "y": 1.0 },
              "o": { "x": 0.333, "y": 0.0 },
              "t": 93.75,
              "s": [391.742, 197.976, 0],
              "ti": [-6.667, 0, 0],
              "to": [0, 0, 0]
            },
            { "t": 125, "s": [431.742, 197.976, 0] }
          ],
          "a": 1,
          "l": 2
        },
        "a": { "a": 0, "k": [175.742, -58.024, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, -2.674],
                    [2.674, 0.0],
                    [0.386, 2.313],
                    [0.0, 0.265],
                    [-2.674, 0.0]
                  ],
                  "o": [
                    [0.0, 2.675],
                    [-2.409, 0.0],
                    [-0.048, -0.241],
                    [0.0, -2.674],
                    [2.674, 0.0]
                  ],
                  "v": [
                    [180.585, -58.024],
                    [175.742, -53.181],
                    [170.971, -57.229],
                    [170.899, -58.024],
                    [175.742, -62.867]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "fl",
              "nm": "F",
              "bm": 0,
              "c": { "a": 0, "k": [0, 0, 0, 1] },
              "o": { "a": 0, "k": 100 },
              "r": 1
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ty": 4
    },
    {
      "ind": 21,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [402.551, 165.922, 0], "l": 2 },
        "a": { "a": 0, "k": [146.551, -90.078, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [175.742, -118.315],
                    [175.742, -58.024],
                    [117.36, -58.024],
                    [117.36, -122.132]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "st",
              "nm": "S",
              "bm": 0,
              "lc": 2,
              "lj": 2,
              "o": { "a": 0, "k": 100 },
              "w": { "a": 0, "k": 1.205 },
              "d": [{ "nm": "d", "n": "d", "v": { "a": 0, "k": 4.819 } }],
              "c": { "a": 0, "k": [0, 0, 0, 1] }
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "tm",
          "nm": "T",
          "s": { "a": 0, "k": 0 },
          "e": { "a": 0, "k": 100 },
          "o": {
            "a": 1,
            "k": [
              {
                "i": { "x": [0.833], "y": [0.833] },
                "o": { "x": [0.167], "y": [0.167] },
                "t": 0,
                "s": [0]
              },
              { "t": 125, "s": [360] }
            ]
          },
          "m": 1
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ty": 4
    },
    {
      "ind": 22,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [401.992, 145.424, 0], "l": 2 },
        "a": { "a": 0, "k": [145.992, -110.576, 0], "l": 2 },
        "s": {
          "k": [
            {
              "i": { "x": [0.667, 0.667, 0.667], "y": [1.0, 1.0, 1.0] },
              "o": { "x": [0.333, 0.333, 0.333], "y": [0.0, 0.0, 0.0] },
              "t": 0,
              "s": [0, 0, 100]
            },
            { "t": 8, "s": [100, 100, 100] }
          ],
          "x": "var $bm_rt;\nvar fx = effect('\u015dlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;",
          "a": 1,
          "l": 2
        }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, -0.34],
                    [0.33, 0.0],
                    [0.0, 0.0],
                    [3.24, -3.33],
                    [-2.85, -0.44],
                    [0.05, -0.33],
                    [0.29, 0.0],
                    [0.03, 0.01],
                    [1.66, 1.38],
                    [2.91, -0.27],
                    [0.0, 0.0],
                    [0.03, 0.32],
                    [-0.33, 0.03],
                    [-1.63, 1.38],
                    [0.01, 0.05],
                    [-0.33, 0.06],
                    [-0.05, -0.32],
                    [-2.52, -2.49],
                    [-0.45, 1.59],
                    [0.0, 0.0],
                    [0.0, 0.33],
                    [-0.33, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [-0.34, 0.0],
                    [0.0, -0.33],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.33],
                    [0.0, 0.0],
                    [-0.38, 1.44],
                    [1.52, 1.2],
                    [0.32, 0.05],
                    [-0.05, 0.3],
                    [-0.03, 0.0],
                    [-3.15, -0.49],
                    [-1.81, 1.58],
                    [0.0, 0.0],
                    [-0.31, 0.0],
                    [-0.03, -0.33],
                    [2.56, -0.24],
                    [-2.82, -2.84],
                    [-0.05, -0.33],
                    [0.32, -0.05],
                    [0.03, 0.2],
                    [2.87, -2.91],
                    [0.0, 0.0],
                    [-0.33, 0.0],
                    [0.0, -0.34],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, -0.33],
                    [0.33, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.33, 0.0]
                  ],
                  "v": [
                    [181.44, -139.87],
                    [180.84, -139.27],
                    [178.79, -139.27],
                    [173.77, -130.06],
                    [180.21, -127.4],
                    [180.71, -126.71],
                    [180.11, -126.2],
                    [180.02, -126.21],
                    [172.92, -129.25],
                    [165.89, -126.2],
                    [165.83, -126.2],
                    [165.23, -126.75],
                    [165.78, -127.4],
                    [172.02, -130.06],
                    [168.63, -136.22],
                    [169.13, -136.91],
                    [169.82, -136.41],
                    [172.88, -130.86],
                    [177.54, -139.27],
                    [165.15, -139.27],
                    [164.55, -139.87],
                    [165.15, -140.48],
                    [172.39, -140.48],
                    [172.39, -141.64],
                    [173.0, -142.24],
                    [173.6, -141.64],
                    [173.6, -140.48],
                    [180.84, -140.48]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "fl",
              "nm": "F",
              "bm": 0,
              "c": { "a": 0, "k": [0, 0, 0, 1] },
              "o": { "a": 0, "k": 100 },
              "r": 1
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [173.82, -135.303] },
              "a": { "a": 0, "k": [173.82, -135.303] },
              "s": {
                "k": [
                  {
                    "i": { "x": [0.833, 0.833], "y": [0.833, 0.833] },
                    "o": { "x": [0.167, 0.167], "y": [0.167, 0.167] },
                    "t": 19,
                    "s": [0, 0]
                  },
                  { "t": 31, "s": [100, 100] }
                ],
                "a": 1
              },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        },
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "gr",
              "nm": "G",
              "bm": 0,
              "it": [
                {
                  "ty": "gr",
                  "nm": "G",
                  "bm": 0,
                  "it": [
                    {
                      "ty": "gr",
                      "nm": "G",
                      "bm": 0,
                      "it": [
                        {
                          "ty": "sh",
                          "nm": "P",
                          "ind": 0,
                          "ks": {
                            "k": {
                              "i": [
                                [0.0, -1.292],
                                [0.0, 0.0],
                                [-1.292, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 1.292],
                                [0.0, 0.0],
                                [1.292, 0.0],
                                [0.0, 0.0]
                              ],
                              "o": [
                                [0.0, 0.0],
                                [0.0, 1.292],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [0.0, 0.0],
                                [1.292, 0.0],
                                [0.0, 0.0],
                                [0.0, -1.292],
                                [0.0, 0.0],
                                [-1.292, 0.0]
                              ],
                              "v": [
                                [145.992, -144.65],
                                [145.992, -120.655],
                                [148.332, -118.315],
                                [152.415, -118.315],
                                [152.415, -110.576],
                                [164.086, -118.315],
                                [197.66, -118.315],
                                [200.0, -120.655],
                                [200.0, -144.65],
                                [197.66, -146.99],
                                [148.332, -146.99]
                              ],
                              "c": true
                            },
                            "a": 0
                          }
                        },
                        {
                          "ty": "st",
                          "nm": "S",
                          "bm": 0,
                          "lc": 2,
                          "lj": 2,
                          "o": { "a": 0, "k": 100 },
                          "w": { "a": 0, "k": 1.205 },
                          "c": { "a": 0, "k": [0, 0, 0, 1] }
                        },
                        {
                          "ty": "tr",
                          "o": { "a": 0, "k": 100 },
                          "r": { "a": 0, "k": 0 },
                          "p": { "a": 0, "k": [0, 0] },
                          "a": { "a": 0, "k": [0, 0] },
                          "s": { "a": 0, "k": [100, 100] },
                          "nm": "T",
                          "sk": { "a": 0, "k": 0 },
                          "sa": { "a": 0, "k": 0 }
                        }
                      ]
                    },
                    {
                      "ty": "tr",
                      "o": { "a": 0, "k": 100 },
                      "r": { "a": 0, "k": 0 },
                      "p": { "a": 0, "k": [0, 0] },
                      "a": { "a": 0, "k": [0, 0] },
                      "s": { "a": 0, "k": [100, 100] },
                      "nm": "T",
                      "sk": { "a": 0, "k": 0 },
                      "sa": { "a": 0, "k": 0 }
                    }
                  ]
                },
                {
                  "ty": "tr",
                  "o": { "a": 0, "k": 100 },
                  "r": { "a": 0, "k": 0 },
                  "p": { "a": 0, "k": [0, 0] },
                  "a": { "a": 0, "k": [0, 0] },
                  "s": { "a": 0, "k": [100, 100] },
                  "nm": "T",
                  "sk": { "a": 0, "k": 0 },
                  "sa": { "a": 0, "k": 0 }
                }
              ]
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ef": [
        {
          "ty": 5,
          "ix": 1,
          "nm": "\u015d",
          "ef": [
            { "ix": 1, "nm": "A", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 2, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 3, "nm": "F", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 4, "nm": "A", "ty": 6, "v": 0 },
            { "ix": 5, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 6, "nm": "A", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 7, "nm": "", "ty": 6, "v": 0 },
            { "ix": 8, "nm": "I", "ty": 6, "v": 0 },
            { "ix": 9, "nm": "S", "ty": 0, "v": { "a": 0, "k": 60 } },
            { "ix": 10, "nm": "S", "ty": 0, "v": { "a": 0, "k": 25 } },
            { "ix": 11, "nm": "", "ty": 6, "v": 0 },
            { "ix": 12, "nm": "F", "ty": 6, "v": 0 },
            { "ix": 13, "nm": "E", "ty": 0, "v": { "a": 0, "k": 10 } },
            { "ix": 14, "nm": "E", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 15, "nm": "D", "ty": 0, "v": { "a": 0, "k": 50 } },
            { "ix": 16, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 17, "nm": "B", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 18, "nm": "", "ty": 6, "v": 0 },
            { "ix": 19, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 20, "nm": "S", "ty": 7, "v": { "a": 0, "k": 0 } },
            { "ix": 21, "nm": "M", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 22, "nm": "O", "ty": 6, "v": 0 },
            { "ix": 23, "nm": "O", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 24, "nm": "D", "ty": 0, "v": { "a": 0, "k": 0.05 } },
            { "ix": 25, "nm": "O", "ty": 0, "v": { "a": 0, "k": 0 } },
            { "ix": 26, "nm": "", "ty": 6, "v": 0 },
            { "ix": 27, "nm": "S", "ty": 6, "v": 0 },
            { "ix": 28, "nm": "S", "ty": 7, "v": { "a": 0, "k": 1 } },
            { "ix": 29, "nm": "S", "ty": 0, "v": { "a": 0, "k": 100 } },
            { "ix": 30, "nm": "", "ty": 6, "v": 0 },
            { "ix": 31, "nm": "", "ty": 6, "v": 0 },
            { "ix": 32, "nm": "P", "ty": 0, "v": { "a": 0, "k": 1 } }
          ],
          "en": 1
        }
      ],
      "ty": 4
    },
    {
      "ind": 23,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": { "a": 0, "k": 0 },
        "p": { "a": 0, "k": [283.627, 131.121, 0], "l": 2 },
        "a": { "a": 0, "k": [27.627, -124.879, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": [
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 0,
                    "s": [
                      {
                        "i": [
                          [0.548, 0.787],
                          [0.412, -0.871],
                          [0.03, -0.332],
                          [0.0, 0.0],
                          [0.0, -0.333],
                          [0.0, 0.0],
                          [-0.333, 0.0],
                          [0.0, 0.333],
                          [0.0, 0.0],
                          [0.0, 0.0],
                          [-0.015, 0.001],
                          [-0.173, -0.249],
                          [-0.415, 0.876]
                        ],
                        "o": [
                          [-0.548, -0.787],
                          [-0.129, 0.272],
                          [0.0, 0.0],
                          [-0.333, 0.0],
                          [0.0, 0.0],
                          [0.0, 0.333],
                          [0.333, 0.0],
                          [0.0, 0.0],
                          [0.0, 0.0],
                          [0.015, 0.0],
                          [0.083, 0.329],
                          [0.548, 0.787],
                          [0.412, -0.871]
                        ],
                        "v": [
                          [66.098, -136.835],
                          [64.359, -136.692],
                          [64.14, -135.768],
                          [-10.739, -135.768],
                          [-11.341, -135.165],
                          [-11.341, -112.972],
                          [-10.739, -112.37],
                          [-10.136, -112.972],
                          [-10.136, -134.562],
                          [64.193, -134.562],
                          [64.236, -134.571],
                          [64.605, -133.68],
                          [66.346, -133.837]
                        ],
                        "c": true
                      }
                    ]
                  },
                  {
                    "i": { "x": 0.667, "y": 1.0 },
                    "o": { "x": 0.333, "y": 0.0 },
                    "t": 61,
                    "s": [
                      {
                        "i": [
                          [0.548, 0.787],
                          [0.412, -0.871],
                          [0.03, -0.332],
                          [0.0, 0.0],
                          [0.0, -0.333],
                          [0.0, 0.0],
                          [-0.333, 0.0],
                          [0.0, 0.333],
                          [0.0, 0.0],
                          [0.0, 0.0],
                          [-0.015, 0.001],
                          [-0.173, -0.249],
                          [-0.415, 0.876]
                        ],
                        "o": [
                          [-0.548, -0.787],
                          [-0.129, 0.272],
                          [0.0, 0.0],
                          [-0.333, 0.0],
                          [0.0, 0.0],
                          [0.0, 0.333],
                          [0.333, 0.0],
                          [0.0, 0.0],
                          [0.0, 0.0],
                          [0.015, 0.0],
                          [0.083, 0.329],
                          [0.548, 0.787],
                          [0.412, -0.871]
                        ],
                        "v": [
                          [16.098, -136.835],
                          [14.359, -136.692],
                          [14.14, -135.768],
                          [-10.739, -135.768],
                          [-11.341, -135.165],
                          [-11.341, -112.972],
                          [-10.739, -112.37],
                          [-10.136, -112.972],
                          [-10.136, -134.562],
                          [14.193, -134.562],
                          [14.236, -134.571],
                          [14.605, -133.68],
                          [16.346, -133.837]
                        ],
                        "c": true
                      }
                    ]
                  },
                  {
                    "t": 125,
                    "s": [
                      {
                        "i": [
                          [0.548, 0.787],
                          [0.412, -0.871],
                          [0.03, -0.332],
                          [0.0, 0.0],
                          [0.0, -0.333],
                          [0.0, 0.0],
                          [-0.333, 0.0],
                          [0.0, 0.333],
                          [0.0, 0.0],
                          [0.0, 0.0],
                          [-0.015, 0.001],
                          [-0.173, -0.249],
                          [-0.415, 0.876]
                        ],
                        "o": [
                          [-0.548, -0.787],
                          [-0.129, 0.272],
                          [0.0, 0.0],
                          [-0.333, 0.0],
                          [0.0, 0.0],
                          [0.0, 0.333],
                          [0.333, 0.0],
                          [0.0, 0.0],
                          [0.0, 0.0],
                          [0.015, 0.0],
                          [0.083, 0.329],
                          [0.548, 0.787],
                          [0.412, -0.871]
                        ],
                        "v": [
                          [66.098, -136.835],
                          [64.359, -136.692],
                          [64.14, -135.768],
                          [-10.739, -135.768],
                          [-11.341, -135.165],
                          [-11.341, -112.972],
                          [-10.739, -112.37],
                          [-10.136, -112.972],
                          [-10.136, -134.562],
                          [64.193, -134.562],
                          [64.236, -134.571],
                          [64.605, -133.68],
                          [66.346, -133.837]
                        ],
                        "c": true
                      }
                    ]
                  }
                ],
                "a": 1
              }
            },
            {
              "ty": "fl",
              "nm": "F",
              "bm": 0,
              "c": { "a": 0, "k": [0, 0, 0, 1] },
              "o": { "a": 0, "k": 100 },
              "r": 1
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ty": 4
    },
    {
      "ind": 24,
      "nm": "L",
      "sr": 1.0,
      "ks": {
        "o": { "a": 0, "k": 100 },
        "r": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.667], "y": [1.0] },
              "o": { "x": [0.333], "y": [0.0] },
              "t": 0,
              "s": [0]
            },
            { "t": 125, "s": [360] }
          ]
        },
        "p": {
          "k": [
            {
              "i": { "x": 0.667, "y": 1.0 },
              "o": { "x": 0.333, "y": 0.0 },
              "t": 0,
              "s": [327.918, 116.924, 0],
              "ti": [0, 0, 0],
              "to": [-8.333, 0, 0]
            },
            {
              "i": { "x": 0.667, "y": 1.0 },
              "o": { "x": 0.333, "y": 0.0 },
              "t": 61,
              "s": [277.918, 116.924, 0],
              "ti": [-8.333, 0, 0],
              "to": [0, 0, 0]
            },
            { "t": 125, "s": [327.918, 116.924, 0] }
          ],
          "a": 1,
          "l": 2
        },
        "a": { "a": 0, "k": [71.918, -139.076, 0], "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "l": 2 }
      },
      "shapes": [
        {
          "ty": "gr",
          "nm": "G",
          "bm": 0,
          "it": [
            {
              "ty": "sh",
              "nm": "P",
              "ind": 0,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [71.986, -139.635],
                    [59.961, -146.578],
                    [71.892, -153.511],
                    [83.917, -146.568]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "sh",
              "nm": "P",
              "ind": 1,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "o": [
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0]
                  ],
                  "v": [
                    [71.345, -124.986],
                    [59.32, -131.929],
                    [59.358, -145.534],
                    [71.384, -138.591]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "sh",
              "nm": "P",
              "ind": 2,
              "ks": {
                "k": {
                  "i": [
                    [0.0, 0.001],
                    [0.049, 0.088],
                    [0.001, 0.002],
                    [0.094, 0.054],
                    [0.0, 0.0],
                    [0.187, -0.108],
                    [0.0, 0.0],
                    [0.035, -0.034],
                    [0.027, -0.048],
                    [0.014, -0.052],
                    [0.0, -0.052],
                    [0.0, 0.0],
                    [-0.188, -0.108],
                    [0.0, 0.0],
                    [-0.104, 0.0],
                    [-0.094, 0.054],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [-0.001, 0.214],
                    [0.0, 0.0],
                    [0.0, 0.001]
                  ],
                  "o": [
                    [0.0, -0.104],
                    [-0.001, -0.002],
                    [-0.052, -0.09],
                    [0.0, 0.0],
                    [-0.187, -0.109],
                    [0.0, 0.0],
                    [-0.044, 0.025],
                    [-0.039, 0.039],
                    [-0.027, 0.046],
                    [-0.013, 0.049],
                    [0.0, 0.0],
                    [0.0, 0.216],
                    [0.0, 0.0],
                    [0.093, 0.054],
                    [0.104, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.185, -0.108],
                    [0.0, 0.0],
                    [0.0, -0.001],
                    [0.0, -0.001]
                  ],
                  "v": [
                    [85.722, -146.571],
                    [85.643, -146.862],
                    [85.641, -146.87],
                    [85.42, -147.091],
                    [72.191, -154.729],
                    [71.588, -154.728],
                    [58.456, -147.097],
                    [58.353, -146.993],
                    [58.237, -146.877],
                    [58.196, -146.723],
                    [58.156, -146.577],
                    [58.114, -131.583],
                    [58.416, -131.06],
                    [71.644, -123.423],
                    [71.944, -123.342],
                    [72.245, -123.422],
                    [72.246, -123.423],
                    [72.247, -123.423],
                    [85.379, -131.054],
                    [85.679, -131.573],
                    [85.722, -146.568],
                    [85.721, -146.569]
                  ],
                  "c": true
                },
                "a": 0
              }
            },
            {
              "ty": "fl",
              "nm": "F",
              "bm": 0,
              "c": { "a": 0, "k": [0, 0, 0, 1] },
              "o": { "a": 0, "k": 100 },
              "r": 1
            },
            {
              "ty": "tr",
              "o": { "a": 0, "k": 100 },
              "r": { "a": 0, "k": 0 },
              "p": { "a": 0, "k": [0, 0] },
              "a": { "a": 0, "k": [0, 0] },
              "s": { "a": 0, "k": [100, 100] },
              "nm": "T",
              "sk": { "a": 0, "k": 0 },
              "sa": { "a": 0, "k": 0 }
            }
          ]
        }
      ],
      "ip": 0,
      "op": 200,
      "st": 0.0,
      "ty": 4
    }
  ],
  "markers": []
}
