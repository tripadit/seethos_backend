"""
Django settings for dualityAI project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

# import sentry_sdk
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = 'django-insecure-8zic7rjll^luqvdalrm7mn=em*-jxx4ar99!31_yd^lzb%b(ey'

# import sentry_sdk

# sentry_sdk.init(
#     dsn="https://c18d20b8b6a95503e4221a5c39fb481c@o4507186198740992.ingest.us.sentry.io/4507186200248320",
#     # Set traces_sample_rate to 1.0 to capture 100%
#     # of transactions for performance monitoring.
#     traces_sample_rate=1.0,
#     # Set profiles_sample_rate to 1.0 to profile 100%
#     # of sampled transactions.
#     # We recommend adjusting this value in production.
#     profiles_sample_rate=1.0,
# )

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# Sendgrid
SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'sagar@credentialfi.com')
SUPPORT_FROM_EMAIL = os.environ.get('SUPPORT_FROM_EMAIL', DEFAULT_FROM_EMAIL)

SOCKET_DOMAIN = os.environ.get('SOCKET_DOMAIN', 'http://localhost:8000')
FRONTEND_DOMAIN = os.environ.get('FRONTEND_DOMAIN', 'http://localhost:3000')
ENV= os.environ.get('ENV', 'dev')


DB_NAME = os.environ.get('DB_NAME', '')
DB_USER = os.environ.get('DB_USER', '')
DB_HOST = os.environ.get('DB_HOST', '')
DB_PASSWORD = os.environ.get('DB_PASSWORD', '')
DB_PORT = os.environ.get('DB_PORT', '5432')

BRANCH_IO_URL = os.environ.get('BRANCH_IO_URL', '')

# stripe Api Key
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')
STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', '')
STRIPE_GENERAL_ID = os.environ.get('STRIPE_GENERAL_ID', '')
STRIPE_ADVANCED_ID = os.environ.get('STRIPE_ADVANCED_ID', '')
STRIPE_GENERAL_ID_YEARLY = os.environ.get('STRIPE_GENERAL_ID_YEARLY', '')
STRIPE_ADVANCED_ID_YEARLY = os.environ.get('STRIPE_ADVANCED_ID_YEARLY', '')
STRIPE_BASIC_ID_MONTHLY = os.environ.get('STRIPE_BASIC_ID_MONTHLY', '')
STRIPE_BASIC_ID_YEARLY = os.environ.get('STRIPE_BASIC_ID_YEARLY', '')
STRIPE_PRO_ID_MONTHLY = os.environ.get('STRIPE_PRO_ID_MONTHLY', '')
STRIPE_PRO_ID_YEARLY = os.environ.get('STRIPE_PRO_ID_YEARLY', '')
STRIPE_PREMIUM_ID_MONTHLY = os.environ.get('STRIPE_PREMIUM_ID_MONTHLY', '')
STRIPE_PREMIUM_ID_YEARLY = os.environ.get('STRIPE_PREMIUM_ID_YEARLY', '')
STRIPE_COUPON_ID = os.environ.get('STRIPE_COUPON_ID', '')

# get intg base url
INTG_BASE_URL = os.environ.get('INTG_BASE_URL', 'http://localhost:8000')

BASE_URL = os.environ.get('BASE_URL', 'http://localhost:8000')

# bot url
BOT_URL = os.environ.get('BOT_URL', 'http://localhost:8003')

# scrape base url
SCRAP_BASE_URL = os.environ.get('SCRAPE_BASE_URL', 'http://localhost:8013')
MAX_LEAD = os.environ.get('MAX_LEAD', 10)
POROXY_CURL_API_KEY = os.environ.get('POROXY_CURL_API_KEY', '')

# [AWS]
# AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID','AKIAZAJ6E2TWOKF57IF7')
# AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY','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')
# AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
# #AWS_CLOUDFRONT_DOMAIN = os.environ.get('AWS_CLOUDFRONT_DOMAIN', '')
#  
# AWS_S3_ENDPOINT_URL = os.environ.get("AWS_S3_ENDPOINT_URL",'') # Make sure nyc3 is correct
# AWS_S3_OBJECT_PARAMETERS = {
#     'CacheControl': 'max-age=86400'
# }
# AWS_QUERYSTRING_AUTH = False

# AWS_STATIC_LOCATION = 'static'
# [AWS]
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', '')
AWS_CLOUDFRONT_DOMAIN = os.environ.get('AWS_CLOUDFRONT_DOMAIN', '')

OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY', '')
OPENAI_ASSISTANT_ID = os.environ.get('OPENAI_ASSISTANT_ID', '')
OPENAI_NEWSLETTER_ASISTANT_ID = os.environ.get('OPENAI_NEWSLETTER_ASISTANT_ID', '')

GOHIGHLEVEL_CLIENT_ID = os.environ.get('GOHIGHLEVEL_CLIENT_ID', '')
GOHIGHLEVEL_CLIENT_SECRET = os.environ.get('GOHIGHLEVEL_CLIENT_SECRET', '')

# Application definition
# DEBUG = True

# ALLOWED_HOSTS = ['newsapi.seethos.ai','news.seethos.ai','127.0.0.1']
# CORS_ORIGIN_ALLOW_ALL = True


# Default email used for various automated messages from Django or your app, like password resets.
DEFAULT_FROM_EMAIL = 'ujjwal@seethos.ai'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
# Allow all hosts to access the server
AllowAnyOriginMiddleware = 'django.middleware.common.CommonMiddleware'

CORS_ALLOW_HEADERS = ['*']
CORS_ALLOW_METHODS = ['*']
CSRF_TRUSTED_ORIGINS = ['http://localhost', 'http://localhost:3000']


CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost",
]
CORS_ALLOW_CREDENTIALS = True 
CORS_ALLOW_ALL_ORIGINS = True
APPEND_SLASH = True



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "dj_rest_auth",
    'rest_framework',
    'rest_framework.authtoken',
    'djoser',
    'accounts',
    'subscription',
    'helpers',
    'drf_yasg',
    'dj_rest_auth.registration',
    'corsheaders',
    'chatbot',
    'django_extensions',
    'storages',
]

AWS_S3_REGION_NAME = os.environ.get('AWS_REGION', 'us-east-2')

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dualityAI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dualityAI.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'HOST': DB_HOST,
        'PASSWORD': DB_PASSWORD,
        'PORT': DB_PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details'
)

# AUTHENTICATION_BACKENDS = (

#    'allauth.account.auth_backends.AuthenticationBackend',

# )


SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = 'YOUR GOOGLE CLIENT ID'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'YOUR GOOGLE CLIENT SECRET'

SOCIAL_AUTH_FACEBOOK_KEY = 'YOUR FACEBOOK APP ID'
SOCIAL_AUTH_FACEBOOK_SECRET = 'YOUR FACEBOOK APP SECRET'

# DRF Setup
REST_FRAMEWORK = {
    'PAGE_SIZE': 20,
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',  # noqa: E501
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    # 'DEFAULT_PERMISSION_CLASSES': (
    #   'rest_framework.permissions.IsAuthenticated',
    # ),
    'COERCE_DECIMAL_TO_STRING': False,
    'UNICODE_JSON': True,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/minutes',
        'user': '1000/minutes',
        'robots': '10/minutes'
    }
}

# djangorestframework-simplejwt
SIMPLE_JWT = {
    'ROTATE_REFRESH_TOKENS': True,
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_URL = 'static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'mysite/static'),
]
AWS_STATIC_LOCATION = 'static'
STATIC_URL = 'static/'  # % (AWS_S3_ENDPOINT_URL, AWS_STATIC_LOCATION) +'/'
if not os.environ.get('AWS_STORAGE_BUCKET_NAME'):
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
else:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
url = 'mongodb+srv://adittripathi2020:UpxlvHSRpR7BrtDR@bot.wkxwbnq.mongodb.net/seethos_chat?retryWrites=true&w=majority&appName=Bot'
# mongodb url
MONGO_URL = url

AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
MEDIA_URL = "https://%s/media/" % AWS_S3_CUSTOM_DOMAIN
# MEDIA_ROOT is not needed when using S3 as storage

CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://clustercfg.chatbot-redis-cache-prod.4hwe1d.use2.cache.amazonaws.com:6379/0')
CELERY_RESULT_BACKEND = 'redis://clustercfg.chatbot-redis-cache-prod.4hwe1d.use2.cache.amazonaws.com:6379/1'
CELERY_IGNORE_RESULT = False

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

AUTH_USER_MODEL = 'accounts.Account'
ACCOUNT_NATURAL_KEY = 'email'
